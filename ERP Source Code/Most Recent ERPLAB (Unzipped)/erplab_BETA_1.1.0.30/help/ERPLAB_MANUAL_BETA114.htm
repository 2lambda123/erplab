<html xmlns:v="urn:schemas-microsoft-com:vml"xmlns:o="urn:schemas-microsoft-com:office:office"xmlns:w="urn:schemas-microsoft-com:office:word"xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=Title content="ERPLAB TOOLBOX USER’S MANUAL"><meta name=Keywords content=""><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="ERPLAB_MANUAL_BETA114_files/filelist.xml"><link rel=Edit-Time-Data href="ERPLAB_MANUAL_BETA114_files/editdata.mso"><!--[if !mso]><style>v\:* {behavior:url(#default#VML);}o\:* {behavior:url(#default#VML);}w\:* {behavior:url(#default#VML);}.shape {behavior:url(#default#VML);}</style><![endif]--><title>ERPLAB TOOLBOX USER’S MANUAL</title><!--[if gte mso 9]><xml> <o:DocumentProperties>  <o:Author>Javier Lopez-Calderon</o:Author>  <o:Template>Normal</o:Template>  <o:LastAuthor>Javier Lopez-Calderon</o:LastAuthor>  <o:Revision>4</o:Revision>  <o:Created>2009-10-06T01:30:00Z</o:Created>  <o:LastSaved>2009-10-06T01:40:00Z</o:LastSaved>  <o:Pages>20</o:Pages>  <o:Words>20787</o:Words>  <o:Characters>118490</o:Characters>  <o:Lines>987</o:Lines>  <o:Paragraphs>236</o:Paragraphs>  <o:CharactersWithSpaces>145514</o:CharactersWithSpaces>  <o:Version>11.1282</o:Version> </o:DocumentProperties> <o:OfficeDocumentSettings>  <o:AllowPNG/> </o:OfficeDocumentSettings></xml><![endif]--><!--[if gte mso 9]><xml> <w:WordDocument>  <w:Zoom>125</w:Zoom> </w:WordDocument></xml><![endif]--><style><!-- /* Font Definitions */@font-face	{font-family:"Times New Roman";	panose-1:0 2 2 6 3 5 4 5 2 3;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;}@font-face	{font-family:Arial;	panose-1:0 2 11 6 4 2 2 2 2 2;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;}@font-face	{font-family:"Courier New";	panose-1:0 2 7 3 9 2 2 5 2 4;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;}@font-face	{font-family:"Monotype Corsiva";	panose-1:0 3 1 1 1 1 2 1 1 1;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;}@font-face	{font-family:Cambria;	panose-1:0 2 4 5 3 5 4 6 3 2;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;}@font-face	{font-family:"Lucida Grande";	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;} /* Style Definitions */p.MsoNormal, li.MsoNormal, div.MsoNormal	{mso-style-parent:"";	margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:Cambria;}h1	{margin-top:12.0pt;	margin-right:0in;	margin-bottom:12.0pt;	margin-left:.25in;	text-align:justify;	text-indent:-.25in;	mso-pagination:widow-orphan;	mso-outline-level:1;	font-size:16.0pt;	font-family:Cambria;}h3	{margin-top:12.0pt;	margin-right:0in;	margin-bottom:3.0pt;	margin-left:0in;	mso-pagination:widow-orphan;	mso-outline-level:3;	font-size:13.0pt;	font-family:Cambria;}p.MsoToc1, li.MsoToc1, div.MsoToc1	{margin-top:.25in;	margin-right:0in;	margin-bottom:0in;	margin-left:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:Cambria;	text-transform:uppercase;	font-weight:bold;}p.MsoToc2, li.MsoToc2, div.MsoToc2	{margin-top:12.0pt;	margin-right:0in;	margin-bottom:0in;	margin-left:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:10.0pt;	font-family:Cambria;	font-weight:bold;}p.MsoToc3, li.MsoToc3, div.MsoToc3	{margin-top:0in;	margin-right:0in;	margin-bottom:0in;	margin-left:12.0pt;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:10.0pt;	font-family:Cambria;}p.MsoToc4, li.MsoToc4, div.MsoToc4	{margin-top:0in;	margin-right:0in;	margin-bottom:0in;	margin-left:24.0pt;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:10.0pt;	font-family:Cambria;}p.MsoToc5, li.MsoToc5, div.MsoToc5	{margin-top:0in;	margin-right:0in;	margin-bottom:0in;	margin-left:.5in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:10.0pt;	font-family:Cambria;}p.MsoToc6, li.MsoToc6, div.MsoToc6	{margin-top:0in;	margin-right:0in;	margin-bottom:0in;	margin-left:48.0pt;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:10.0pt;	font-family:Cambria;}p.MsoToc7, li.MsoToc7, div.MsoToc7	{margin-top:0in;	margin-right:0in;	margin-bottom:0in;	margin-left:60.0pt;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:10.0pt;	font-family:Cambria;}p.MsoToc8, li.MsoToc8, div.MsoToc8	{margin-top:0in;	margin-right:0in;	margin-bottom:0in;	margin-left:1.0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:10.0pt;	font-family:Cambria;}p.MsoToc9, li.MsoToc9, div.MsoToc9	{margin-top:0in;	margin-right:0in;	margin-bottom:0in;	margin-left:84.0pt;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:10.0pt;	font-family:Cambria;}p.MsoFootnoteText, li.MsoFootnoteText, div.MsoFootnoteText	{margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:10.0pt;	font-family:Cambria;}p.MsoCommentText, li.MsoCommentText, div.MsoCommentText	{margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:Cambria;}p.MsoHeader, li.MsoHeader, div.MsoHeader	{margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	tab-stops:center 3.0in right 6.0in;	font-size:12.0pt;	font-family:Cambria;}p.MsoFooter, li.MsoFooter, div.MsoFooter	{margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	tab-stops:center 3.0in right 6.0in;	font-size:12.0pt;	font-family:Cambria;}span.MsoFootnoteReference	{vertical-align:super;}span.MsoCommentReference	{font-size:9.0pt;}a:link, span.MsoHyperlink	{color:blue;	text-decoration:underline;	text-underline:single;}a:visited, span.MsoHyperlinkFollowed	{color:purple;	text-decoration:underline;	text-underline:single;}table.MsoNormalTable	{mso-style-parent:"";	font-size:10.0pt;	font-family:"Times New Roman";}p.MsoCommentSubject, li.MsoCommentSubject, div.MsoCommentSubject	{margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:10.0pt;	font-family:Cambria;	font-weight:bold;}p.listparagraph, li.listparagraph, div.listparagraph	{mso-style-name:listparagraph;	margin-top:0in;	margin-right:0in;	margin-bottom:0in;	margin-left:.5in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:Cambria;}p.paragraph, li.paragraph, div.paragraph	{mso-style-name:paragraph;	margin-top:0in;	margin-right:0in;	margin-bottom:8.0pt;	margin-left:0in;	text-align:justify;	mso-pagination:widow-orphan;	font-size:11.0pt;	font-family:Cambria;}p.note, li.note, div.note	{mso-style-name:note;	margin-top:0in;	margin-right:0in;	margin-bottom:8.0pt;	margin-left:0in;	text-align:justify;	mso-pagination:widow-orphan;	font-size:11.0pt;	font-family:Cambria;	font-style:italic;}p.literaltext, li.literaltext, div.literaltext	{mso-style-name:literaltext;	margin:0in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	font-size:10.0pt;	font-family:Cambria;}p.steps, li.steps, div.steps	{mso-style-name:steps;	margin-top:0in;	margin-right:0in;	margin-bottom:0in;	margin-left:.75in;	margin-bottom:.0001pt;	text-align:justify;	text-indent:-.25in;	mso-pagination:widow-orphan;	tab-stops:list .75in;	font-size:11.0pt;	font-family:Cambria;}p.bulletedlist, li.bulletedlist, div.bulletedlist	{mso-style-name:bulletedlist;	margin-top:0in;	margin-right:0in;	margin-bottom:4.0pt;	margin-left:.5in;	text-align:justify;	text-indent:-.25in;	mso-pagination:widow-orphan;	font-size:11.0pt;	font-family:Cambria;}p.commandwindowtext, li.commandwindowtext, div.commandwindowtext	{mso-style-name:commandwindowtext;	margin:0in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	font-size:9.0pt;	font-family:Cambria;}span.charchar5	{mso-style-name:charchar5;	font-size:12.0pt;}span.charchar4	{mso-style-name:charchar4;	font-size:12.0pt;}span.charchar3	{mso-style-name:charchar3;	font-size:9.0pt;}span.charchar1	{mso-style-name:charchar1;	font-size:10.0pt;	font-weight:bold;}@page Section1	{size:11.0in 8.5in;	margin:1.2in 1.0in 1.2in 1.0in;	mso-header-margin:.5in;	mso-footer-margin:.5in;	mso-paper-source:0;}div.Section1	{page:Section1;}--></style><!--[if gte mso 9]><xml> <o:shapedefaults v:ext="edit" spidmax="1036">  <o:colormru v:ext="edit" colors="#fff3be"/>  <o:colormenu v:ext="edit" fillcolor="#fff3be"/> </o:shapedefaults></xml><![endif]--><!--[if gte mso 9]><xml> <o:shapelayout v:ext="edit">  <o:idmap v:ext="edit" data="1"/> </o:shapelayout></xml><![endif]--></head><body bgcolor="#fff3be" lang=EN-US link=blue vlink=purple style='tab-interval:.5in'><div class=Section1><p class=MsoNormal><a name="_Toc215515873"><span style='font-size:26.0pt'>ERPLABTOOLBOX </span></a><span style='font-size:26.0pt'>USER’S MANUAL</span></p><p class=MsoNormal style='text-align:justify'>Version <span style='font-size:18.0pt;font-family:"Monotype Corsiva"'>Beta 1.1.4<span style="mso-spacerun:yes">&nbsp;&nbsp; </span></span><span style='font-size:18.0pt;font-family:Courier;color:red'>(DRAFT)</span></p><p class=MsoNormal style='text-align:justify'>7 August 2009</p><p class=MsoNormal style='text-align:justify'>User’s Manual written by CandaceMarkley, Steve Luck, and Javier Lopez-Calderon</p><p class=MsoNormal style='text-align:justify'>ERPLAB Toolbox core designed byJavier Lopez-Calderon and Steve Luck</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>Note: ERPLAB Toolbox is in a periodof rapid development. This version is designed to provide most basic ERPprocessing functions; enhanced versions of these functions and additionalfunctions will be forthcoming over the next few years. Feel free to make yourown modifications and additions to the toolbox, and send them to us if youthink they would be of value to other users. </p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>Some features are present in thisversion that have not yet been documented, and some features may have changedsince this document was released. In addition, some of the screen shots shownin this document may reflect previous versions and may not conform with thetext. </p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>We have set up three web-baseddiscussion groups. One is designed for people to ask questions and give andreceive advice about how to use ERPLAB Toolbox. Another is designed forreporting bugs and describing work-arounds. The third is designed to give usersthe opportunity to make suggestions about modifications and new features. Theycan be accessed at <ahref="http://erpinfo.org/erplab/erplab-discussion/erplab-discussion-forum/">http://erpinfo.org/erplab/erplab-discussion/erplab-discussion-forum/</a>(you will need to join the erpinfo.org web site to access these discussiongroups). There is also an email list, erplab@erpinfo.org, that you can use tocommunicate with the developers and with other users. If you would like to jointhis list, you should go to <ahref="http://mail01.cmb.ucdavis.edu/mailman/listinfo/erplab">http://mail01.cmb.ucdavis.edu/mailman/listinfo/erplab</a>.</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>Please keep in mind that this is <b>FREE</b><spanstyle='font-weight:normal'> software, and we do not have the resources toprovide the level of support that commercial software vendors can provide.</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><b><i>Important note: In somecases, Matlab errors will occur leading to an error message that instructs youto report the error to the EEGLAB developers. If the error occurs when anERPLAB routine is being used, please report the error to us and not to theEEGLAB developers.</i></b></p><p class=MsoNormal style='text-align:justify'><b><i>&nbsp;</i></b></p><p class=MsoNormal style='text-align:justify'><b><i>&nbsp;</i></b></p><p class=MsoNormal style='text-align:justify'><b><i>&nbsp;</i></b></p><p class=MsoNormal style='text-align:justify'><b><i>&nbsp;</i></b></p><p class=MsoNormal style='text-align:justify'><b><i>&nbsp;</i></b></p><p class=MsoNormal style='text-align:justify'><b><i>&nbsp;</i></b></p><span style='font-size:12.0pt;font-family:Cambria;mso-ansi-language:EN-US;mso-fareast-language:EN-US'><b><i><br clear=ALL style='page-break-before:always'></i></b></span><p class=MsoNormal style='text-align:justify'><span style='font-size:16.0pt;font-family:Arial'><b>Table of Contents</b></span></p><p class=MsoToc1 style='tab-stops:22.0pt right 467.5pt'>1.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Release Notes for Version Beta 1.1.4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4</p><p class=MsoToc1 style='tab-stops:22.0pt right 467.5pt'>2.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Introduction&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4</p><p class=MsoToc1 style='tab-stops:22.0pt right 467.5pt'>3.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Installation&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4</p><p class=MsoToc1 style='tab-stops:22.0pt right 467.5pt'>4.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Important Background Concepts and DataStructures&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6</p><p class=MsoToc1 style='tab-stops:22.0pt right 467.5pt'>5.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Basic Steps in Processing EEG/ERPData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8</p><p class=MsoToc1 style='tab-stops:22.0pt right 467.5pt'>6.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Loading EEG Data intoEEGLAB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10</p><p class=MsoToc1 style='tab-stops:22.0pt right 467.5pt'>7.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Hints About File Names, Datasets, and the CommandWindow&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11</p><p class=MsoToc1 style='tab-stops:22.0pt right 467.5pt'>8.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Overview of Procedures Leading up toAveraging&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;13</p><p class=MsoToc1 style='tab-stops:22.0pt right 467.5pt'>9.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>The EVENTLISTstructure&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;13</p><p class=MsoToc1 style='tab-stops:32.0pt right 467.5pt'>9.1.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Creating anEVENTLIST&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;14</p><p class=MsoToc1 style='tab-stops:32.0pt right 467.5pt'>9.2.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>The Contents of anEVENTLIST&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;18</p><p class=MsoToc1 style='tab-stops:32.0pt right 467.5pt'>9.3.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Boundary Events and DisabledEvents&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;20</p><p class=MsoToc1 style='tab-stops:32.0pt right 467.5pt'>9.4.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Editing and Importing anEventList&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;22</p><p class=MsoToc1 style='tab-stops:28.7pt right 467.5pt'>10.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Assigning Events to Bins withBINLISTER&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;23</p><p class=MsoToc1 style='tab-stops:38.7pt right 467.5pt'>10.1.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Overview ofBINLISTER&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;23</p><p class=MsoToc1 style='tab-stops:38.7pt right 467.5pt'>10.2.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Creating a Bin Descriptor File(BDF)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;23</p><p class=MsoToc1 style='tab-stops:38.7pt right 467.5pt'>10.3.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>RunningBINLISTER&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;26</p><p class=MsoToc1 style='tab-stops:38.7pt right 467.5pt'>10.4.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>BehavioralAnalyses&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;27</p><p class=MsoToc1 style='tab-stops:28.7pt right 467.5pt'>11.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>EpochingBins&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;30</p><p class=MsoToc1 style='tab-stops:28.7pt right 467.5pt'>12.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Creating New Channels in theEEG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;32</p><p class=MsoToc1 style='tab-stops:28.7pt right 467.5pt'>13.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>ArtifactDetection&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;33</p><p class=MsoToc1 style='tab-stops:38.7pt right 467.5pt'>13.1.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>The Moving Window Peak-to-PeakFunction&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35</p><p class=MsoToc1 style='tab-stops:38.7pt right 467.5pt'>13.2.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>The Blink DetectionFunction&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;38</p><p class=MsoToc1 style='tab-stops:38.7pt right 467.5pt'>13.3.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>The StepFunction&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;38</p><p class=MsoToc1 style='tab-stops:38.7pt right 467.5pt'>13.4.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Sample-to-Sample VoltageThreshold&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;39</p><p class=MsoToc1 style='tab-stops:28.7pt right 467.5pt'>14.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Getting Useful Information from the Matlab CommandLine&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 39</p><p class=MsoToc1 style='tab-stops:28.7pt right 467.5pt'>15.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Compute AveragedERPs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;41</p><p class=MsoToc1 style='tab-stops:28.7pt right 467.5pt'>16.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>BinOperations&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;42</p><p class=MsoToc1 style='tab-stops:28.7pt right 467.5pt'>17.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Filtering&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44</p><p class=MsoToc1 style='tab-stops:28.7pt right 467.5pt'>18.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Plotting ERPWaveforms&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;46</p><p class=MsoToc1 style='tab-stops:28.7pt right 467.5pt'>19.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>TopographicMapping&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;49</p><p class=MsoToc1 style='tab-stops:28.7pt right 467.5pt'>20.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Saving, Loading, Clearing, and ExportingERPsets&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;52</p><p class=MsoToc1 style='tab-stops:28.7pt right 467.5pt'>21.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Averaging Across ERPsets (Creating GrandAverages)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;52</p><p class=MsoToc1 style='tab-stops:28.7pt right 467.5pt'>22.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>ERP Measurement Tool&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;53</p><p class=MsoToc1 style='tab-stops:28.7pt right 467.5pt'>23.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>Scripting usingERPLAB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;55</p><p class=MsoToc1 style='tab-stops:28.7pt right 467.5pt'>24.<spanstyle='font-family:"Times New Roman";text-transform:none;font-weight:normal'>&nbsp;&nbsp;&nbsp;</span>ERPLAB’sfunctions&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;56</p><p class=MsoNormal style='margin-left:-4.5pt;text-align:justify'>&nbsp;</p><p class=MsoNormal style='margin-left:-4.5pt;text-align:justify'>&nbsp;</p><span style='font-size:16.0pt;font-family:Arial;mso-font-kerning:18.0pt;mso-ansi-language:EN-US;mso-fareast-language:EN-US'><b><br clear=ALLstyle='page-break-before:always'></b></span><h1><a name="_Toc111191533">1.</a><span style='mso-bookmark:_Toc111191533'><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp; </span>ReleaseNotes for Version Beta 1.1.</span>4</h1><p class=paragraph>This section is for users who have upgraded from a previousrelease (Beta 1.0 or Beta 1.1) and would like to know what has changed. VersionBeta 1.1.4 contains some major modifications to the artifact rejection andaveraging processes. One of the most significant changes is that the <b>BINLIST</b><spanstyle='font-weight:normal'> and </span><b>EVENTLIST</b><span style='font-weight:normal'> structures were merged together into a single </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> structure that contains both event and bininformation. If you used a previous version (especially Beta 1.0), we recommendthat you carefully read the section on <a href="#_Important_Background_Concepts">datastructures</a>, the overview of <a href="#_Basic_Steps_in">processing steps</a>,and the section on the <a href="#_The_EVENTLIST_structure">EVENTLIST structure</a>.<span style='background:aqua'>Note that the format for the </span></span><spanstyle='background:aqua'><b>ERP</b></span><span style='background:aqua'>structure has changed significantly, including the renaming of several fields;when you attempt to load an <b>ERP</b></span><span style='background:aqua'>from a file, this version will automatically attempt to convert the <b>ERP</b></span><spanstyle='background:aqua'> structure to the new format.</span> In addition, theformat for calling many of the ERPLAB functions has changed, so scripts basedon the previous version will need to be updated.</p><h1><a name="_Toc111191534">2.</a><span style='mso-bookmark:_Toc111191534'><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp; </span>Introduction</span></h1><p class=paragraph><a name="_Toc215515876">ERPLAB Toolbox is a freelyavailable, open source set of MATLAB</a><a name="_ftnref1"></a><a href="#_ftn1"><spanstyle='mso-bookmark:_ftnref1'><sup>[1]</sup></span><span style='mso-bookmark:_ftnref1'></span></a><span style='mso-bookmark:_ftnref1'></span> routines foranalyzing event-related potential (ERP) data. It uses the freely available,open source EEGLAB<a name="_ftnref2"></a><a href="#_ftn2"><spanstyle='mso-bookmark:_ftnref2'><sup>[2]</sup></span><span style='mso-bookmark:_ftnref2'></span></a><span style='mso-bookmark:_ftnref2'></span> toolbox as afront end. That is, EEGLAB is used to read in EEG data files and performvarious operations on the EEG, and ERPLAB contains a set of new functions,which are added as plug-ins into EEGLAB, extending the set of operations that auser can perform within EEGLAB. These plug-ins include additional EEGprocessing manipulations (e.g., new functions for marking trials withartifacts) along with functions that provide powerful methods for sorting EEGepochs and averaging them together. Once a set of averages has been created,they are saved in binary files and can be exported into text files (allowingthem to be imported into other ERP analysis systems).</p><p class=paragraph><a name="_Toc215515877">ERPLAB also contains a set ofroutines that operate on the averaged ERP waveforms (e.g., linear recombination,plotting, filtering, measurement, etc.). </a>We are still in the early stagesof implementing these routines, but most of the basics are available.</p><p class=paragraph><a name="_Toc215515878">As in EEGLAB, the ERPLAB routinescan be accessed from the Matlab command window and from Matlab scripts inaddition to being accessed from the EEGLAB GUI.</a> Consequently, ERPLABprovides the easy of learning of a GUI-based system and also provides the powerand flexibility of a scripted system.</p><p class=paragraph>The ERPLAB routines were inspired by ERPSS (theEvent-Related Potential Software System), which was developed in SteveHillyard’s lab at UCSD under the direction of Jon Hansen. However, the code isentirely new, and it is not designed to be fully backward compatible withERPSS. Anyone who knows how to use ERPSS will be able to learn ERPLAB rapidly.But those who do not know ERPSS will also find ERPLAB approachable because ofthe GUI. </p><h1><a name="_Toc111191535">3.</a><span style='mso-bookmark:_Toc111191535'><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp; </span>Installation</span></h1><p class=paragraph><span style='background:aqua'>ERPLAB runs from with EEGLAB,so you must first install EEGLAB. ERPLAB 1.1.4 has been tested only withversion 6.03 of EEGLAB (aka eeglab2008October01_beta), under Matlab version 7.4(R2007a). ERPLAB may work with other versions of EEGLAB and Matlab, but this isnot known. The Matlab Signal Processing Toolbox is required.</span></p><p class=paragraph>To install ERPLAB, first make sure that EEGLAB is notrunning. Then simply place the folder for the latest version of ERPLAB insidethe EEGLAB plugins folder. For example, you might place ERPLAB in a path likethis:</p><p class=literaltext>Applications &gt; MATLAB74&gt;<span style='font-size:12.0pt'></span>eeglab2008October01_beta &gt;plugins&gt;erplab_BETA_1.1.4</p><p class=note>Note: the folder names that are italicized will change as EEGLABand/or ERPLAB are updated, so you should use the appropriate names for theversions of EEGLAB and ERPLAB you are using.</p><p class=note>Note: You must delete any previous version of ERPLAB beforeinstalling the new version. A convenient way to do this and retain the oldversion is to convert the old version into a compressed archive (e.g., a .zipor .sit file). If you simply move the old folder, it may still be accessed byMatlab (depending on how your computer’s operating system handles paths), andthis could cause problems. So we <u>strongly</u> recommend that you eitherdelete the old folder or convert it to a compressed archive.</p><p class=paragraph>The next step is to make sure that the ERPLAB folder isknown to MATLAB. To accomplish this, launch MATLAB and choose <b>File &gt; SetPath &gt; Add with subfolders</b><span style='font-weight:normal'>. Browse toselect the following path:</span></p><p class=literaltext><a name="_Toc215515880">Applications &gt; MATLAB &gt; </a>eeglab2008October01_beta</p><p class=note>Note: This path should be one level up from where you addedERPLAB. Please be careful not to narrow the path more than this. Again, theabove folder name that is italicized may change as EEGLAB is updated. You mayfirst want to revert to the default path before adding this folder to yourpath; this will help ensure that you do not have outdated folders somewhere in yourpath.</p><p class=paragraph>Make sure that you save your new path.</p><p class=paragraph><i>Optional</i><span style='font-style:normal'>: The EEGLABdevelopers have provided us with a slightly modified version of the EEGLABroutine for plotting EEG data. This modification makes it easier to see labelsfor events when you are viewing the EEG. To install this routine, you must movethe file “eegplot.m” from the <b>erplab</b></span> folder into the <b>eeglab&gt; functions &gt; sigprocfunc</b><span style='font-weight:normal'> folder(deleting the eegplot.m file that is already present in that folder).</span></p><p class=paragraph>To launch EEGLAB (and the included ERPLAB plug-in), simplytype eeglab in the MATLAB command window. However, to avoid memory problems andother conflicts, you may want to type ‘clear all’ before launching EEGLAB. </p><p class=paragraph>Once you have launched EEGLAB, you can verify that ERPLAB ispresent by clicking on the ERPLAB menu in the EEGLAB GUI. You should seesomething like this:</p><p class=paragraph><img border=0 width=300 height=316 id="_x0000_i1025"src="ERPLAB_MANUAL_BETA114_files/image001.gif"></p><h1><a name="_Toc111191536"></a><a name="_Important_Background_Concepts"></a>4.<spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp; </span>ImportantBackground Concepts and Data Structures</h1><p class=paragraph>EEGLAB uses a data structure called <b>EEG</b><spanstyle='font-weight:normal'> to store the EEG data and associated informationfrom a single recording session. This structure is inherited and extended byERPLAB, and an analogous structure called </span><b>ERP</b><spanstyle='font-weight:normal'> is used by ERPLAB to store averaged ERP waveforms.ERPLAB also uses an </span><b>EVENTLIST</b><span style='font-weight:normal'>structure that provides a link between the EEG and ERP structures. These datastructures are at the core of the operation of ERPLAB. You will access thesestructures directly if you write Matlab scripts, and you will access themindirectly when you use the GUI.</span></p><p class=paragraph><i>Datasets and the <b>EEG</b></i><span style='font-weight:normal'><i> Structure.</i></span> EEGLAB typically maintains a single instanceof the <b>EEG</b><span style='font-weight:normal'> structure in RAM. Most EEGLABsignal processing functions operate on the EEG structure, and the output ofthese processes is typically a new </span><b>EEG</b><span style='font-weight:normal'> structure (e.g., containing a filtered version of the original EEGdata). Because a single set of EEG data can take up a large amount of memory,and because Matlab tends to use memory inefficiently, it can be problematic tokeep multiple sets of EEG data active in memory at one time. Consequently,EEGLAB defines the concept of a <i>dataset</i></span>, which is essentially apointer to an EEG structure. That is, many datasets can be loaded into EEGLAB,each of which contains the information from a previous instance of the <b>EEG</b><spanstyle='font-weight:normal'> structure, but only one is “active” at a given time(and is accessed via the </span><b>EEG</b><span style='font-weight:normal'>structure). Depending on how much memory is available, EEGLAB can be configuredto keep the EEG data from the other loaded datasets in RAM or cached on disk. </span></p><p class=paragraph>Each processing step typically operates on the currentdataset, creates a new dataset based on some set of operations, and then makesthe new dataset the current dataset. For example, filtering the EEG data in thecurrent dataset would create a new dataset, which would then become the currentdataset. All of the loaded datasets are available from the <b>Datasets</b><spanstyle='font-weight:normal'> menu (see screenshot below), which allows the userto select which dataset is the current dataset (and therefore available fromthe EEG structure). In addition, datasets can be opened, saved, and clearedfrom the File menu. This is an extremely convenient system, because it allowsthe user to apply a series of processing steps to a set of EEG data, save theintermediate steps as cached datasets (with or without storing them as files ondisk) and then quickly move back and forth between them. </span></p><p class=paragraph><img border=0 width=339 height=203 id="_x0000_i1026"src="ERPLAB_MANUAL_BETA114_files/image002.gif"></p><p class=paragraph><i>Bins, ERPsets, and the <b>ERP</b></i><spanstyle='font-weight:normal'><i> Structure.</i></span> EERPLAB uses a similar setof conventions to store and manipulate averaged ERP waveforms. To understandhow this works, it is first necessary to understand the ERPSS concept of a <i>bin</i><spanstyle='font-style:normal'>. A bin is a set of averaged ERP waveforms, one foreach electrode site, which were created by averaging together a specific set oftrials. A simple oddball experiment, for example, might have one bin for thetargets and another bin for the standards. However, a sophisticated experimentmight have dozens of different bins, with a given bin being something like“Digits preceded by letters followed by a correct response between 200 and 1000ms, in a condition in which digits are rare and letters are frequent.” </span></p><p class=paragraph>In many ERP analysis systems, a bin would be equivalent to asingle averaged ERP file. However, this can lead to a huge number of differentfiles for each subject, making it difficult to keep track of everything.ERPLAB, in contrast, can store an unlimited number of bins together in an <i>erpset</i><spanstyle='font-style:normal'> (analogous to a dataset), and each data processingoperation is typically applied to all of the bins in the currently active erpset.This saves time and reduces errors.</span></p><p class=paragraph>The currently active erpset is accessed via a structurenamed <b>ERP</b><span style='font-weight:normal'> (analogous to the </span><b>EEG</b><spanstyle='font-weight:normal'> structure). A single bin within an ERP structure isan Electrodes x Time Points matrix. The set of bins within an ERP structureadds a third dimension to this matrix (Electrodes x Time Points x Bins). Inaddition to this 3-D structure, the ERP structure contains a header thatspecifies the names of the bins, the names and locations of the electrodes, thesampling rate, etc. All of the bins within an ERP structure must have the samenumber of electrodes and time points so that the data matrix is a completemultidimensional array. This makes it easy to apply Matlab’s matrix operationsto an entire erpset. Each ERPLAB processing step that operates on an erpsetcreates a new erpset (e.g., filtering, re-referencing, creating differencewaves). One erpset is the current erpset at a given time (accessed via the </span><b>ERP</b><spanstyle='font-weight:normal'> structure), but many erpsets may be loaded at agiven time, and the user can select among them via the ERPsets menu (seescreenshot below).</span></p><p class=paragraph><img border=0 width=369 height=196 id="_x0000_i1027"src="ERPLAB_MANUAL_BETA114_files/image003.gif"></p><p class=paragraph><i>Event Codes.</i><span style='font-style:normal'> ERPLABhas also inherited the concept of “event codes” from ERPSS. An event code isjust like a “trigger code,” “stimulus code,” or “marker” in other systems, inthat it marks the time of a given event and the identity of that event.However, it is not quite the same as in some systems, because the software doesnot make any internal distinction between stimulus events, response events, orany other kind of events. The user has total control over how a given event istreated, which provides greater flexibility.</span></p><p class=paragraph><i>The <b>EVENTLIST</b></i><span style='font-weight:normal'><i>Structure.</i></span> An <b>EVENTLIST</b><span style='font-weight:normal'> is asimple and compact structure created by ERPLAB that contains information aboutall of the events in an EEG structure (typically stimuli and responses, butalso other events such as eye movements, EMG bursts, etc.). It combines thefunctionality of the log and binlist files from ERPSS. ERPLAB has powerfultools for assigning events to bins, and the </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> structure plays a key role in this process. It canalso be used as a convenient way of inserting, deleting, and changing eventcodes (e.g., merging response information that was saved by a stimuluspresentation program with EEG data stored in a dataset).</span></p><h1><a name="_Toc111191537"></a><a name="_Basic_Steps_in"></a>5.<spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp; </span>BasicSteps in Processing EEG/ERP Data</h1><p class=paragraph>This section provides an outline of the typical sequence ofoperations for analyzing an ERP experiment using the combination of EEGLAB andERPLAB. The details will be found in later sections, but it is useful to havean overview of the whole process.</p><p class=steps style='margin-left:.25in;tab-stops:list .25in .75in'>1.<spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span>Importan EEG file into EEGLAB, where it becomes a dataset. Once you have imported theraw EEG, you should view it with <b>Plot &gt; Channel data (scroll)</b><spanstyle='font-weight:normal'> to make sure everything looks OK. The original EEGfile can come from one of the many different commercial EEG recording systemssupported by EEGLAB (including Neuroscan and Biosemi; see the EEGLABdocumentation for the supported file types.) The ERPSS RAW format is supportedby EEGLAB but apparently does not work well at this time. Any of the EEGLABfunctions that operate on continuous data (e.g., filtering the data, ICA-basedartifact correction) can be applied at this point.</span></p><p class=steps style='margin-left:.25in;tab-stops:list .25in .75in'>2.<spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span>Thereare several EEGLAB routines that you may wish to run at this point (or afterepoching). For example, if you wish to filter the EEG, you can select <b>Tools&gt; Filter the data. </b><span style='font-weight:normal'>Alternatively youmay with to use ERPLAB’s Butterworth filter routine (</span><b>ERPLAB &gt;Filter Tools &gt; Butterworth Filter for EEG Dataset</b><span style='font-weight:normal'>), which we think is better for most conventional ERP applications. Youmay also wish to enter electrode location coordinates at this point (which willbe useful later for topographic mapping). This can be accomplished with </span><b>Edit&gt; Channel locations</b><span style='font-weight:normal'>, which allows youto automatically choose standard locations on the basis of the electrode names(or enter custom coordinates).</span></p><p class=steps style='margin-left:.25in;tab-stops:list .25in .75in'>3.<spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span>Createthe <b>EVENTLIST</b><span style='font-weight:normal'> structure from thecurrent dataset using </span><b>ERPLAB &gt; EventList &gt; Create EventList</b><spanstyle='font-weight:normal'>. The </span><b>EVENTLIST</b><span style='font-weight:normal'> structure will ordinarily be attached to the </span><b>EEG</b><spanstyle='font-weight:normal'> structure. It stores information about ERPLAB’sevent processing and bin assignments. It can also be saved as a text file,allowing you to insert, modify, or delete events and then import the new eventsback into the dataset. At this point, you can also assign text labels for eachnumeric event code. You can even assign bins for the events if there is asimple 1:1 mapping between event codes and bins.</span></p><p class=steps style='margin-left:.25in;tab-stops:list .25in .75in'>4.<spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span>Ifyou need to specify a more complex mapping between events and bins, you will dothis using <b>ERPLAB &gt; Assign Bins (BINLISTER)</b><span style='font-weight:normal'>. This involves creating a Bin Descriptor File (BDF), a text file thatprovides an abstract description of the events that will be averaged together(just as in ERPSS). For example, you can specify that Bin 3 will consist oftargets that were preceded by a nontarget and followed 200-1500 ms later by aleft-hand button-press response.</span></p><p class=steps style='margin-left:.25in;tab-stops:list .25in .75in'>5.<spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span>Convertthe continuous EEG data in the dataset into a set of fixed-length epochs aroundeach event using <b>ERPLAB &gt; Extract Bin-Based Epochs</b><spanstyle='font-weight:normal'>. (Note that this differs from EEGLAB’s </span><b>Tools&gt; Extract epochs</b><span style='font-weight:normal'> function in severalways, so you should not use the EEGLAB epoching function in conjunction withERPLAB.) Any of the EEGLAB functions that operate on epoched data can beapplied at this point.</span></p><p class=steps style='margin-left:.25in;tab-stops:list .25in .75in'>6.<spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span>Performartifact detection on the epoched dataset, marking problematic EEG segments sothey can be excluded during the averaging process. Prior to artifact rejection,you may wish to create new channels in the dataset (e.g., a bipolar HEOGchannel from separate HEOG-left and HEOG-right channels). This is accomplishedwith <b>ERPLAB &gt; EEG Channel Operations</b><span style='font-weight:normal'>.After you have performed artifact detection, you can use </span><b>Plot &gt;Channel data (scroll)</b><span style='font-weight:normal'> to see which epochshave been marked for rejection and to manually mark and unmark specific epochs.You can, of course, use EEGLAB’s ICA-based artifact correction instead of, orin addition to, ERPLAB’s artifact rejection routines. EEGLAB also containsartifact detection routines, which you can use in conjunction with ERPLAB’sroutines.</span></p><p class=steps style='margin-left:.25in;tab-stops:list .25in .75in'>7.<spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span>Averagetogether the epochs that have been assigned to each bin using <b>ERPLAB &gt;Compute Averaged ERPs.</b><span style='font-weight:normal'> The averaged dataare stored in an </span><b>ERP</b><span style='font-weight:normal'> structure,which is basically an Electrodes x Time x Bins matrix, plus a header thatdescribes the subject, sampling rate, electrode names, etc. The new </span><b>ERP</b><spanstyle='font-weight:normal'> structure becomes the current ERPset, and you cansave it to disk as a binary file (using a “.erp” extension is recommended, butit is really a Matlab “.mat” file). You can also export this to a text file (ina format that can be directly read by the ERPSS </span><b>asctoerp</b><spanstyle='font-weight:normal'> program or in a standard format, with one bin perfile) by using </span><b>ERPLAB &gt; Export ERP to ASC (readable by ERPSS)</b><spanstyle='font-weight:normal'> or </span><b>ERPLAB &gt; Export ERP to ASC(universal)</b><span style='font-weight:normal'>.</span></p><p class=steps style='margin-left:.25in;tab-stops:list .25in .75in'>8.<spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span>Youcan filter your ERP data with <b>ERPLAB &gt; FIR Filter Tools &gt; ButterworthFilter for ERP</b><span style='font-weight:normal'>.</span></p><p class=steps style='margin-left:.25in;tab-stops:list .25in .75in'>9.<spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span>Youcan also create new bins through linear combinations of the current bins using <b>ERPLAB&gt; Bin Operations</b><span style='font-weight:normal'>.</span></p><p class=steps style='margin-left:.25in;tab-stops:list .25in .75in'>10.<spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp; </span>Plot theaveraged ERP waveforms using <b>ERPLAB &gt; Plot ERP Waveforms</b><spanstyle='font-weight:normal'> or plot topographic maps of voltage using </span><b>ERPLAB&gt; Plot 2D ERP Map</b><span style='font-weight:normal'>. These plots can besave (in vector format) as PDF files, which can then be imported into andedited by a variety of illustration programs.</span></p><p class=steps style='margin-left:.25in;tab-stops:list .25in .75in'>11.<spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp; </span>Create aGrand Average across multiple ERPsets using <b>ERPLAB &gt; Average AcrossERPsets</b><span style='font-weight:normal'>.</span></p><p class=steps style='margin-left:.25in;tab-stops:list .25in .75in'>12.<spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp; </span>Perform ERPmeasurements, such as mean amplitude and peak latency using <b>ERPLAB &gt; ERPMeasurement Tool</b><span style='font-weight:normal'>. This tool is in an earlyversion, but it works.</span></p><h1><a name="_Toc111191538">6.</a><span style='mso-bookmark:_Toc111191538'><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp; </span>LoadingEEG Data into EEGLAB</span></h1><p class=paragraph><span style='color:black'>You will often start a dataprocessing session by importing an EEG data file that was created by some dataacquisition system or by opening a saved EEG file that was previously createdin EEGLAB. This is accomplished with EEGLAB functions that are </span>not<spanstyle='color:black'> a part of ERPLAB (see the EEGLAB documentation fordetails). </span></p><p class=paragraph><span style='color:black'>But first we would like to providean important hint: When you open or save files from within EEGLAB (includingfrom within the ERPLAB), MATLAB’s current directory will be the defaultlocation for the files. You can navigate anywhere in the file system to open orsave files, but you will save a lot of time if you set MATLAB’s currentdirectory to the folder that contains the data you are currently processing.Here is how to do this:</span></p><p class=paragraph><span style='color:black'>At the top of the MATLAB </span>window<spanstyle='color:black'>, there is a drop-down menu displaying your currentdirectory. Click on the <b>browse</b></span><span style='color:black'> button‘…’ to its immediate left to change the current directory. Choose the folderthat contains the data you want to work with.</span></p><p class=paragraph>Now you are ready to open a file. If you are opening an EEGfile that was saved from a previous EEGLAB session, you can simply choose <b>File&gt; Load existing dataset</b><span style='font-weight:normal'> from EEGLAB.The dataset will then be visible in the </span><b>Dataset</b><spanstyle='font-weight:normal'> menu within EEGLAB. For loading multiple datasetsin one step, select </span><b>File &gt; Import data &gt; Load multipleEEGLAB/ERPLAB datasets</b><span style='font-weight:normal'> (see screenshotbelow).</span></p><p class=paragraph><span style='mso-field-code:"SHAPE  \\* MERGEFORMAT";mso-field-lock:yes'><img border=0 width=234 height=183 id="_x0000_i1051"src="ERPLAB_MANUAL_BETA114_files/image004.gif"><img border=0 width=234height=182 id="_x0000_i1052" src="ERPLAB_MANUAL_BETA114_files/image005.jpg"><imgborder=0 width=477 height=183 id="_x0000_i1028"src="ERPLAB_MANUAL_BETA114_files/image006.gif"></span></p><p class=paragraph><i>An Important Note about Datasets and the EEGLAB GUI</i><spanstyle='font-style:normal'>. A dataset is simply an EEGLAB-format EEG file. Manydatasets may be open at a given time within EEGLAB, but only one of them is“active” at a given time. That is, almost all operations that you will performin EEGLAB and ERPLAB will operate on the currently active dataset. You canselect which dataset is active from the <b>Datasets</b></span> menu. Manyoperations will create a new dataset, which then becomes the active dataset.For example, if you tell EEGLAB to run a filter, the filter will be applied tothe active dataset, and this will create a new dataset that will now be theactive dataset. In almost all cases, operations that create new datasets willgive you the option of saving the dataset to a file. This is not mandatory,however. Thus, it is possible to create a dataset without saving it. This isconvenient, because you can perform a sequence of operations without having tocreate a large number of files. However, it is very important to keep in mindthat a dataset that has not been saved will be lost of you quit from EEGLAB orfrom MATLAB (or if your computer hangs, turns off, loses power, restarts,etc.). </p><p class=paragraph>If you are importing an EEG file for the first time intoEEGLAB, choose <b>File &gt; Import Data</b><span style='font-weight:normal'>.Choose the format of the data you want to import. In the browse window thatappears, select the data file you wish to import and then click </span><b>Open</b><spanstyle='font-weight:normal'>.</span></p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>A window will probably appear asking you fill in certain criteriadepending on how much of your data you would like to import. These options mayvary by data file type. We typically find that the default settings areappropriate (but our experience is limited to Biosemi and Neuroscan files).Please refer to EEGLAB documentation for further instructions on importingdata, setting import criteria, and accessing old datasets.</p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Remember that a dataset does not necessarily contain the sameinformation as the original data file. A dataset is a copy of a certain portionof the data contained in your data file, depending on the import criteria youspecify. EEGLAB only has access to the dataset you provide it. In most cases,however, you will import the entire file into a dataset.</p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Eventually, a window will appear that will ask you to name the datasetthat you are importing and ask you if you would like to save this dataset as afile. You may choose to save this dataset if you would like to stop andcontinue working on this dataset at a later point. Not saving a dataset doesnot mean you will lose your original EEG data, because you will still have theoriginal EEG data file. However, to avoid going through the importing processagain, you will usually want to save the dataset you have created.</p><h1><a name="_Toc111191539">7.</a><span style='mso-bookmark:_Toc111191539'><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp; </span>HintsAbout File Names, Datasets, and the Command Window</span></h1><p class=paragraph><span style='color:black'><i>Hints about Filenames</i></span><spanstyle='color:black'>. EEGLAB and ERPLAB allow you to give files any names thatare allowed by your operating system and by Matlab. However, white space andspecial characters in file names can lead to unanticipated problems, especiallyif you transfer your files to a different operating system. We thereforesuggest that you not use spaces in </span>your<span style='color:black'> filenames (or folder names) and that you limit special characters to ‘_’, ‘.’, and‘-‘ (underscore, period, and dash). For example, avoid file names such as ‘mybig $$$ file.txt’ and instead use names such as ‘my_big_money_file.txt’. Also,it is a good idea to use the suffix ‘.txt’ for text files (especially inWindows, but also on other platforms). Averaged ERPs are stored on disk inMatlab’s intrinsic binary file format (.mat). However, we recommend that youuse the suffix <b>.erp</b></span><span style='color:black'> instead of <b>.mat</b></span><spanstyle='color:black'> for these files. Similarly, EEGLAB dataset filenamestypically have a <b>.set</b></span><span style='color:black'> suffix.</span></p><p class=paragraph><span style='color:black'>EEGLAB datasets have a name thatis stored in the dataset structure and is used to identify the dataset in the <b>Datasets</b></span><spanstyle='color:black'> menu. Similarly, each </span>erpset<span style='color:black'> has a name that is used to identify it in the <b>ERPsets</b></span><spanstyle='color:black'> menu. In both cases, the name of the dataset or erpset isnot necessarily the same as the name of the file in which the data are stored.This has the potential to lead to confusion. Consequently, we recommend thatyou use the same string to name both the dataset/erpset and file in with thedataset/erpset is stored. The ERPLAB functions that create files are designedto make this the default behavior.</span></p><p class=paragraph><span style='color:black'>In addition, when you use any ofthe ERPLAB functions to create a new dataset/erpset from a currentdataset/erpset, the function will suggest a name for the new dataset/erpset byappending a descriptive string onto the old dataset/erpset name. For </span>example<spanstyle='color:black'>, if you add an <b>EVENTLIST</b></span><spanstyle='color:black'> structure to a dataset named ‘dataset3’, ERPLAB willsuggest that you name the new dataset ‘dataset3_elist’. These namingconventions are not mandatory, but they can be useful in keeping track of whatis in each file.</span></p><p class=paragraph><!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"> <v:stroke joinstyle="miter"/> <v:formulas>  <v:f eqn="if lineDrawn pixelLineWidth 0"/>  <v:f eqn="sum @0 1 0"/>  <v:f eqn="sum 0 0 @1"/>  <v:f eqn="prod @2 1 2"/>  <v:f eqn="prod @3 21600 pixelWidth"/>  <v:f eqn="prod @3 21600 pixelHeight"/>  <v:f eqn="sum @0 0 1"/>  <v:f eqn="prod @6 1 2"/>  <v:f eqn="prod @7 21600 pixelWidth"/>  <v:f eqn="sum @8 21600 0"/>  <v:f eqn="prod @7 21600 pixelHeight"/>  <v:f eqn="sum @10 21600 0"/> </v:formulas> <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/> <o:lock v:ext="edit" aspectratio="t"/></v:shapetype><v:shape id="_x0000_s1026" type="#_x0000_t75" alt="" style='position:absolute; left:0;text-align:left;margin-left:0;margin-top:0;width:468pt;height:174pt; z-index:1;mso-wrap-distance-left:9pt;mso-wrap-distance-top:0; mso-wrap-distance-right:9pt;mso-wrap-distance-bottom:0; mso-position-horizontal:left;mso-position-horizontal-relative:text; mso-position-vertical-relative:line' o:allowoverlap="f"> <v:imagedata src="ERPLAB_MANUAL_BETA114_files/image007.gif"/> <w:wrap type="square" anchorx="page"/></v:shape><![endif]--><![if !vml]><img width=468 height=174src="ERPLAB_MANUAL_BETA114_files/image007.gif" align=left hspace=9 v:shapes="_x0000_s1026"><![endif]><i>Hintabout datasets:</i><span style='font-style:normal'> Most EEGLAB and ERPLABroutines that operate on datasets will create a new dataset. When this happens,you will see a window that looks something like this screenshot:</span></p><p class=paragraph>&nbsp;</p><p class=paragraph>This window allows you to name the new dataset (this namewill appear in the <b>Datasets</b><span style='font-weight:normal'> menu). Italso lets you decide if you want to save it as a file. If you save it as afile, you can either type in the filename (in which case it will be saved inthe current folder, as set from the main Matlab command window) or click the </span><b>Browse</b><spanstyle='font-weight:normal'> button to navigate anywhere in your file system.Should you save it as a file? If you do, this will take time, and you may endup with a lot of big files that clog up your file system. If you don’t, youwill no longer have that dataset once you quit from EEGLAB (or if EEGLAB or thecomputer crashes). So you need to balance these two sets of constraints.Generally speaking, you will want to save the initially imported dataset, thefinal result of your EEG processing sequence (e.g., the version that you willbe converting into a set of averaged ERPs), and any intermediate stages thattook a long time to generate. You can always recreate a dataset from an earlierversion (assuming you remember what you did to create it), so you should notbother saving a lot of intermediate datasets.</span></p><p class=paragraph>This window also lets you decide what to do with the datasetthat was used as the input to the current processing step. One possibility isto keep the old dataset in memory, in which case the result of the processing stepbecomes a new dataset. The other possibility is to overwrite the old datasetwith the result of the processing step (in memory, not on the disk). We tend tojust keep the old datasets, which makes it easy to back up and repeat a step.However, this may lead to problems if memory is tight.</p><p class=paragraph>In most cases, we just click the <b>OK</b><spanstyle='font-weight:normal'> button with the default values, which will not savethe new dataset to disk and will keep the old dataset in memory.</span></p><p class=paragraph><i>Hint about the command window:</i><span style='font-style:normal'> When you run an EEGLAB or ERPLAB function from the EEGLAB GUI, thefunction may run for several seconds before it finishes. Do to the nature ofthe Matlab environment, you will not receive very obvious feedback from the GUIthat the function is still running or that it has finished (e.g., the mousepointer will not turn into a watch or clock icon, and there will be no progressbar). However, many routines print tidbits of information to the Matlab commandwindow while they are running, and many will print <b>Done</b></span> (orsomething to that effect) in the command window when they have finished. If youwatch the command window, you will be able to see the progress of thesecommands. If you do not pay attention to the command window, you may try toselect a new function from one of the EEGLAB menus before the current functionis complete, and this can cause the program to choke, hang, quit, die, orotherwise make your life miserable. So have a little patience and watch thecommand window.</p><h1><a name="_Toc111191540">8.</a><span style='mso-bookmark:_Toc111191540'><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp; </span>Overviewof Procedures Leading up to Averaging</span></h1><p class=paragraph>The next several sections provide a detailed description ofthe concepts and procedures you will need to understand to make the transitionfrom continuous EEG data to averaged ERP waveforms. Here we provide an overviewto help you see the big picture. The basic steps are as follows:</p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Extract a list of the event codes from the EEG data in a dataset andstore it in an <b>EVENTLIST</b><span style='font-weight:normal'> structure.This list may then be edited to add, delete, and/or modify the events (e.g., toadd responses from your stimulus presentation system, eye movement onset timesfrom an eye tracker, etc.).</span></p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Using the events stored in the <b>EVENTLIST</b><span style='font-weight:normal'> structure, determine which events will be assigned to each bin. Thisis accomplished using the BINLISTER routine.</span></p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Convert the continuous EEG in the dataset into a set of fixed-durationepochs, time-locked to the relevant events in the <b>EVENTLIST</b><spanstyle='font-weight:normal'> structure.</span></p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Apply artifact detection routines to mark epochs that should be excludedfrom averaging</p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Average together the epochs for each bin, creating an <b>ERP</b><spanstyle='font-weight:normal'> structure (which is stored in a new erpset).</span></p><p class=paragraph>Other processes may occasionally be interposed between thesesteps. For example, one could filter the data after epoching but beforeartifact rejection. However, these steps are usually conducted in this orderwithout any interposed operations.</p><p class=paragraph>ERPLAB provides a great deal of power and flexibility inthese steps. As a result, there is quite a bit for you to learn, and each ofthese steps is described in considerable detail in the next sections. You maybe tempted to just skim these sections and figure out the basics of how toaverage your data. We urge you to resist this temptation. If you invest sometime now so that you fully understand how these processes work, you will save agreat deal of time and frustration later.</p><h1><a name="_Toc111191541"></a><a name="_The_EVENTLIST_structure"></a>9.<spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp; </span>TheEVENTLIST structure</h1><p class=paragraph>Sophisticated ERP experiments often involve complexsequences of events (stimuli, responses, EMG bursts, eye movements, and theevent information stored by EEGLAB in the <b>EEG</b><span style='font-weight:normal'> structure is insufficient for the analysis of many ERP experiments.ERPLAB has thus created the </span><b>EVENTLIST</b><span style='font-weight:normal'> structure to allow this information to be stored and manipulated in aconvenient manner. </span></p><p class=paragraph>For each event, the <b>EVENTLIST</b><span style='font-weight:normal'> has a record indicating the event code, its time of occurrence, itsduration, and a set of binary flags that can be used to code anything that theuser would like to represent about an event (e.g., whether and why it wasrejected, what task the subject was performing at the time of the event, etc.).[Note for ERPSS fans: There is no <i>condition code</i></span> concept inERPLAB, but flags can be used to emulate this concept.] It can be veryconvenient to have this information stored separately from the EEG data (e.g.,for behavioral analyses), and the <b>EVENTLIST</b><span style='font-weight:normal'> structure can be saved as a text file as well as being appended ontothe relevant EEG structure (which allows it to be saved and loaded along withthe EEG structure). It is created from the current </span><b>EEG</b><spanstyle='font-weight:normal'> structure. If you save the </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> as a text file, you can edit it with a text editor(or a program created in Matlab or some other language) and then reload it,causing it to overwrite the original set of events in the dataset. Thisprovides a mechanism for adding, deleting, and modifying events. </span></p><p class=paragraph>This structure contains a copy of all of the eventinformation stored in the <b>type</b><span style='font-weight:normal'> field ofthe </span><b>EEG</b><span style='font-weight:normal'> structure, plus severaladditional pieces of information that will be described later. It is importantto realize that EEGLAB doesn’t “know” anything about the </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> structure. Consequently, some effort is necessaryto make sure that any changes you make to the </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> structure get copied back into the </span><b>EEG.event</b><spanstyle='font-weight:normal'> structure. Any ERPLAB routines that modify the </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> structure will ask you if you want to copy themodified events back into the </span><b>EEG.event</b><span style='font-weight:normal'> structure. In addition, you can use the </span><b>ERPLAB &gt; Transfereventinfo to EEG.type</b><span style='font-weight:normal'> command toaccomplish this. We will provide examples later in this section.</span></p><p class=paragraph>One key limitation of the <b>EEG.event</b><spanstyle='font-weight:normal'> structure is that each event can be identified by anumeric event code or a text label, but you can’t have both. ERPLAB allows youto have both in the </span><b>EVENTLIST</b><span style='font-weight:normal'>structure. That way you can assign a text label for each numeric event codewithout losing the original event codes.</span></p><p class=paragraph><span style='background:aqua'>Eventually you will convertyour continuous EEG data into a set of discrete epochs, time-locked to theevents in the <b>EEG</b></span><span style='background:aqua'> structure (seethe section on <a href="#_Epoching_Bins">epoching </a>below). When you do this,many of the events from the continuous EEG will be lost (e.g., response eventsif you are time-locking to stimulus events). However, the <b>EVENTLIST</b></span><spanstyle='background:aqua'> structure will continue to maintain all of the events.This is important because artifact detection is performed on the epoched data,and you may want to exclude trials with artifacts from your behavioralanalyses. The <b>EVENTLIST</b></span><span style='background:aqua'> structuremakes this possible because it contains all of the information about yourstimuli and responses and can also contain information about which events wererejected because of artifacts. We have added a piece of information to the <b>EEG</b></span><spanstyle='background:aqua'> structure that allows ERPLAB to know which event inthe <b>EVENTLIST</b></span><span style='background:aqua'> structure correspondsto the time-locking event in each epoch in the <b>EEG</b></span><spanstyle='background:aqua'> structure (more details will be provided in thesection on <a href="#_Behavioral_Analyses">behavioral analyses</a>).</span></p><h1 style='margin-left:.55in;text-indent:-.55in'><a name="_Toc111191542">9.1.</a><spanstyle='mso-bookmark:_Toc111191542'><span style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span>Creating an EVENTLIST</span></h1><p class=paragraph>You must create an <b>EVENTLIST</b><span style='font-weight:normal'> structure for a given dataset if you plan to use ERPLAB’s averagingroutine for that dataset (this must be done on the continuous EEG data, notafter epoching). An EventList can be created from the current dataset in twoways. The simplest is to use </span><b>ERPLAB &gt; EventList &gt; CreateEventList (simple)</b><span style='font-weight:normal'>. This just creates the </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> structure from the information in the </span><b>EEG</b><spanstyle='font-weight:normal'> structure.</span></p><p class=paragraph>The second way to create an EventList is to use <b>ERPLAB&gt; EventList &gt; Create EventList (advanced)</b><span style='font-weight:normal'>, which brings up the window shown below. This version allows you toassign a text label to each event code, and you can also use it to assign eventcodes to bins (if there is a simple 1:1 mapping between event codes and bins).If your data acquisition system uses text labels instead of numeric event codesfor each event, you could assign a numeric event code to each label and/orassign each event label to a bin.</span></p><p class=note>Note: ERPLAB does not yet make full use of event labels, so you willlikely need numeric event codes.</p><p class=paragraph>&nbsp;</p><p class=paragraph><img border=0 width=467 height=303 id="_x0000_i1029"src="ERPLAB_MANUAL_BETA114_files/image008.gif"></p><p class=paragraph>The example shown in the screenshot above is from a simpleoddball experiment in which the standard corresponds to an event code of 122,the target corresponds to an event code of 112, target responses correspond toan event code of 9, and standard responses correspond to an event code of 8. Eachoccurrence of the target is assigned to Bin 1 (labeled “target bin”) and eachoccurrence of the standard is assigned to Bin 2 (labeled “standard bin”). Theresponse event codes were not assigned to any bin. To set up this mapping, atable was created (shown in the left portion of the window).</p><p class=paragraph>Here’s how you can assign event labels to your event codes(or vice versa) and assign events to bins. You begin by using the GUI to builda table in which each line specifies one type of event, giving the event codeand event label for that event type (and, optionally, a bin number and bindescription). Once you have built the table and click <b>APPLY</b><spanstyle='font-weight:normal'>, the program will find each event matching theevent code and add the corresponding label in the </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> structure (or vice versa if you have event labelsbut not event codes). If you do not provide a label for a given event code, theevent code will still appear in the </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> structure. In addition, if you provide bininformation, the </span><b>EVENTLIST</b><span style='font-weight:normal'>structure will contain bin assignments for each event for which a bin has beendefined. It is fine if some events are not assigned to a bin (as in theresponse events in the screenshot). </span></p><p class=paragraph>The table is created as follows. When you begin, the onlyline in the table (shown in the left portion of the window) will be <b>new line</b><spanstyle='font-weight:normal'>, and it will be highlighted. You can then enter anevent code, an event label, and bin number, and a bin description in the rightportion of the window. You then click on </span><b>update line</b><spanstyle='font-weight:normal'> and it will create a line in the table with thatevent code, event label, bin number, and bin description. The bin number andbin description are optional; in most cases, you will not assign bins at thisstage (the typical method is described in the next section). The screen shot showshow the window looks after several events have been described. To edit a line,simply click on it and update the values for that line; you must then click </span><b>updateline</b><span style='font-weight:normal'> to update the values in the currentline. You can also use the arrow, </span><b>TOP</b><span style='font-weight:normal'>, and </span><b>BOTTOM</b><span style='font-weight:normal'> buttons tonavigate in the table.</span></p><p class=paragraph>Once you have created the table, you will usually want tosave it so that you can use it again (either for the same dataset or, morecommonly, for subsequent datasets). To do this, simply click <b>save list</b><spanstyle='font-weight:normal'>. To open a previously saved list, simply click </span><b>openlist</b><span style='font-weight:normal'>. Once you have the list, you cancreate the </span><b>EVENTLIST</b><span style='font-weight:normal'> structureby clicking the </span><b>UPDATE</b><span style='font-weight:normal'> button.You can easily create this list with a text editor instead of using the </span><b>CreateEventlist</b><span style='font-weight:normal'> GUI; if you use the GUI tocreate a simple table, you will readily see the format for this table.</span></p><p class=paragraph>There are two important options. The first is <b>CreateEventList text file output</b><span style='font-weight:normal'>. Selecting thisoption (and specifying a filename) will save a copy of the </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> structure in a text file. In the next section, wewill take a look at the contents of an EventList text file, which will give youa better idea of what information is stored in the </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> structure. Note that if you don’t save theEventList as a file at this point, you can do it later by selecting </span><b>ERPLAB&gt; EventList &gt; Export EventList to Text File</b><span style='font-weight:normal'>.</span></p><p class=paragraph><!--[if gte vml 1]><v:shape id="_x0000_s1027" type="#_x0000_t75" alt="" style='position:absolute;left:0;text-align:left;margin-left:0; margin-top:0;width:141pt;height:198pt;z-index:2;mso-wrap-distance-left:9pt; mso-wrap-distance-top:0;mso-wrap-distance-right:9pt; mso-wrap-distance-bottom:0;mso-position-horizontal:left; mso-position-horizontal-relative:text;mso-position-vertical-relative:line' o:allowoverlap="f"> <v:imagedata src="ERPLAB_MANUAL_BETA114_files/image009.gif"/> <w:wrap type="square" anchorx="page"/></v:shape><![endif]--><![if !vml]><img width=141 height=198src="ERPLAB_MANUAL_BETA114_files/image009.gif" align=left hspace=9 v:shapes="_x0000_s1027"><![endif]>Thesecond option is <b>Transfer EVENTLIST info to EEG.event</b><spanstyle='font-weight:normal'>. You will usually want to do this, because it givesyou the ability to use the text labels you have just created for each eventcode when viewing the EEG in EEGLAB’s plotting functions (e.g., </span><b>Plot&gt; Channel data scroll</b><span style='font-weight:normal'>). If you selectthis option, it will cause another window to pop up (after you click </span><b>APPLY</b><spanstyle='font-weight:normal'>). This window is shown in the screenshot to theleft. It allows you to choose whether the event info in the </span><b>EEG</b><spanstyle='font-weight:normal'> structure will contain the numeric event codes, thecode labels, or the bin labels for each event (which then determines how eventcodes are labeled when you plot the data). You will usually want to select </span><b>CodeLabels</b><span style='font-weight:normal'>. The two screenshots below showwhat the EEG will look like when you view it with the original event codes (topscreenshot) and with the event labels (bottom screenshot). Note that a limitedamount of space is provided by EEGLAB for showing the labels, so it is usuallybest to have relatively short labels (10 characters or less).</span></p><p class=note>Note: A special version of the <b>Plot &gt; Channel data (scroll)</b><spanstyle='font-weight:normal'> routine must be installed in EEGLAB, or else youwill be able to see only 3-4 characters of your labels. The procedure for thisis described in the Installation section of this manual.</span></p><p class=paragraph><img border=0 width=400 height=273 id="_x0000_i1030"src="ERPLAB_MANUAL_BETA114_files/image010.gif"></p><p class=paragraph><img border=0 width=400 height=273 id="_x0000_i1031"src="ERPLAB_MANUAL_BETA114_files/image011.gif"></p><p class=paragraph>Instead of event codes or event labels, you can choose tostore <b>Bin Labels</b><span style='font-weight:normal'> in the </span><b>EEG</b><spanstyle='font-weight:normal'> structure. This alternative applies only after youhave assigned events to bins (either at this stage or by means of the BINLISTERroutine at a later stage). The bin label is a string that indicates the bin towhich the epoch has been assigned. The original event label or event is alsoprovided (in parentheses) for your information. For example, if an event codeof 100 was assigned to Bin 1, the bin label for this event code would bechanged to </span><b>B1(100)</b><span style='font-weight:normal'>. If a givenevent code is assigned to multiple bins, the bins are separated by commas. Thatis, if an event code of 100 was assigned to Bins 1 and 7, the label for thisevent code would be changed to </span><b>B1,7(100)</b><span style='font-weight:normal'>. If event labels are present, they are used inside of the parenthesesinstead of event codes (e.g., </span><b>B1(target)</b><span style='font-weight:normal'>).</span></p><p class=note>Note: We will eventually make it possible to use event labels inaddition to event codes when using BINLISTER to assign events to bins. However,this has not yet been implemented, so the main use of event labels at presentis during viewing of the raw EEG data.</p><h1 style='margin-left:.55in;text-indent:-.55in'><a name="_Toc111191543">9.2.</a><spanstyle='mso-bookmark:_Toc111191543'><span style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span>The Contents of an EVENTLIST</span></h1><p class=paragraph>To understand the contents of an EventList, it is easiest toconsider what the EventList looks like when saved to a text file. Here is anexample of a text-file version of an <b>EVENTLIST</b><span style='font-weight:normal'>, showing the first six events in a simple oddball experiment. </span></p><p class=literaltext style='tab-stops:.5in 1.0in 121.5pt 175.5pt 3.0in 3.5in 5.0in 405.0pt'>bin1,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 252,&nbsp;&nbsp;&nbsp; Standard (correct) </p><p class=literaltext style='tab-stops:.5in 1.0in 121.5pt 175.5pt 3.0in 3.5in 5.0in 405.0pt'>bin2,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 63,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Target (correct) </p><p class=literaltext style='tab-stops:.5in 1.0in 121.5pt 175.5pt 3.0in 3.5in 5.0in 405.0pt'>#item&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ecode&nbsp;&nbsp;&nbsp; label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onset &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;diff&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dura&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flags&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bin</p><p class=literaltext style='tab-stops:.5in 1.0in 121.5pt 175.5pt 3.0in 3.5in 5.0in 405.0pt'>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(sec)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(sec)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (msec)&nbsp;&nbsp;(binary)</p><p class=literaltext style='tab-stops:.5in 1.0in 121.5pt 175.5pt 3.0in 3.5in 5.0in 405.0pt'>1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;122&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;standard&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.0000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.0000&nbsp;&nbsp;&nbsp;0.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0000000000000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ 1 ]</p><p class=literaltext style='tab-stops:.5in 1.0in 121.5pt 175.5pt 3.0in 3.5in 5.0in 405.0pt'>2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std_resp&nbsp;&nbsp;&nbsp;&nbsp;8.3962&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.3962&nbsp;&nbsp;&nbsp;0.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0000000000000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ ]</p><p class=literaltext style='tab-stops:.5in 1.0in 121.5pt 175.5pt 3.0in 3.5in 5.0in 405.0pt'>3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;122&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;standard&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10.0000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.6038&nbsp;&nbsp;&nbsp; 0.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0000000000000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ 1 ]</p><p class=literaltext style='tab-stops:.5in 1.0in 121.5pt 175.5pt 3.0in 3.5in 5.0in 405.0pt'>4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std_resp&nbsp;&nbsp;&nbsp;&nbsp;10.4265&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.4265&nbsp;&nbsp;&nbsp;0.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0000000000000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ ]</p><p class=literaltext style='tab-stops:.5in 1.0in 121.5pt 175.5pt 3.0in 3.5in 5.0in 405.0pt'>5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;132&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12.0000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.5735&nbsp;&nbsp;&nbsp;0.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0000000000000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ 2 ]</p><p class=literaltext style='tab-stops:.5in 1.0in 121.5pt 175.5pt 3.0in 3.5in 5.0in 405.0pt'>6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;targ_resp&nbsp;&nbsp;&nbsp; 12.5191&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.519&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0000000000000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ ]</p><p class=literaltext>&nbsp;</p><p class=paragraph>The file begins with a header (described later and not shownhere) that indicates the name of the Dataset from which the EventList wascreated, the sampling rate, the number of events, etc. The next section of thefile lists the bins for the file (we will say more about where this informationcomes from in a later section), along with the number of occurrences of eachbin in the file (e.g., “# 252” means that there were 252 occurrences of thisbin).</p><p class=paragraph>The next two lines are comments (any line beginning with a“#” is a comment); these comments are labels for the columns that follow. </p><p class=paragraph>Each of the following lines represents the information froman event, in order of occurrence. The first column is the item number. The nexttwo lines are the event code and label for the event. Each event must have atleast one of these two values to indicate what kind of event it was. Labels areeasier to remember than numbers, and we encourage you to use them. Some EEGacquisition programs provide labels, but most provide only numeric codes.ERPLAB provides a simple function that can add labels based on the numericcodes.</p><p class=paragraph>The next three columns provide timing information. The onsettime is the most important column, because it indicates when the event codebegan (relative to the beginning of the file). The “diff” column indicates theamount of time between the current event and the previous event; it is therefor your information only (i.e., changing this value will not change the timeof the event). The “dura” column provides the duration of the event. Some EEGacquisition systems provide real information about an event’s duration (e.g.,how long a button was held down). ERPLAB does not currently use thisinformation, but it is available for future expansion (and can be accessed bycustom Matlab scripts).</p><p class=paragraph>The next column is a set of binary flags, each of which canhave a value of 0 or 1. These can be used for any purpose, but they are mostcommonly used to keep track of information about artifact rejection and tostore information that is used when the events are sorted into bins. </p><p class=paragraph>The next column is an “enable” value, which is used toindicate whether the event should be used or ignored by any routines thatoperate on the <b>EVENTLIST</b><span style='font-weight:normal'> structure. Forexample, if the subject was asleep or an electrode was disconnected for aperiod of 20 events, this value could be set to zero for those events, andthose events would be ignored during averaging. The same effect could beobtained by simply deleting the events from the </span><b>EVENTLIST</b><spanstyle='font-weight:normal'>, but using the enable flag allows the events to be“turned back on” at a later point if desired. Additional details will beprovided in <a href="#_Boundary_Events_and_3">a later section</a>.</span></p><p class=paragraph>The final column is a “bin” field, which is used todetermine which the event will be assigned to during the averaging process. Ina simple oddball experiment, for example, Bin 1 might be the standard stimuliand Bin 2 might be the target stimuli. The bin assignment can be accomplishedwhen the EventList is first created (as described in the previous section), orit can be accomplished using the BINLISTER routine (described in <ahref="#_Assigning_Events_to">a later section</a>). Note that a given eventmight not be assigned to any bin (as in the response events in the exampleshown above). In addition, a given event can be assigned to more than one bin (e.g.,a target event could be assigned into a “Correctly Detected Targets” bin andalso into an “All Targets” bin).</p><p class=paragraph>The header section of an EventList text file looks likethis:</p><p class=literaltext># Non-editable header begin--------------------------------------------------------------------------------</p><p class=literaltext># </p><p class=literaltext># setname...................: CNT file_elist_impel</p><p class=literaltext># filname...................: no_specified</p><p class=literaltext># filpath...................: no_specified</p><p class=literaltext># nbchan....................: 15</p><p class=literaltext># pnts......................: 134500</p><p class=literaltext># srate.....................: 250</p><p class=literaltext># nevents...................: 639</p><p class=literaltext># prog Version..............: 1.1.4</p><p class=literaltext># creation date.............: 24-Apr-2009 15:41:17</p><p class=literaltext># user Account..............: luck</p><p class=literaltext># user name.................: no_name</p><p class=literaltext># </p><p class=literaltext># Non-editable header end --------------------------------------------------------------------------------</p><p class=literaltext><span style='font-size:11.0pt'>&nbsp;</span></p><p class=paragraph>The following information is provided:</p><p class=bulletedlist style='margin-bottom:0in;margin-bottom:.0001pt'><spanstyle='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The name of thedataset from which the EventList was created</p><p class=bulletedlist style='margin-bottom:0in;margin-bottom:.0001pt'><spanstyle='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The name of thedataset that was created along with the EventList (if any)</p><p class=bulletedlist style='margin-bottom:0in;margin-bottom:.0001pt'><spanstyle='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The location ofyour saved dataset, if you chose to save your dataset</p><p class=bulletedlist style='margin-bottom:0in;margin-bottom:.0001pt'><spanstyle='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The number ofchannels in your dataset</p><p class=bulletedlist style='margin-bottom:0in;margin-bottom:.0001pt'><spanstyle='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The number ofdata points in your dataset</p><p class=bulletedlist style='margin-bottom:0in;margin-bottom:.0001pt'><spanstyle='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The samplingrate at which your data was recorded</p><p class=bulletedlist style='margin-bottom:0in;margin-bottom:.0001pt'><spanstyle='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The number ofrecorded event codes in your dataset</p><p class=bulletedlist style='margin-bottom:0in;margin-bottom:.0001pt'><spanstyle='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The version ofERPLAB that was used to create the EventList</p><p class=bulletedlist style='margin-bottom:0in;margin-bottom:.0001pt'><spanstyle='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The date thatthe EventList file was created</p><p class=bulletedlist style='margin-bottom:0in;margin-bottom:.0001pt'><spanstyle='font-family:Symbol'>·</span><span style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The user accountof the person who created the file (if available)</p><p class=bulletedlist style='margin:0in;margin-bottom:.0001pt;text-indent:0in'>&nbsp;</p><p class=paragraph>Note that the header is not editable. That is, the header isignored when you import it back into ERPLAB, so any changes you make to it willhave no effect.</p><p class=paragraph>You can also view the contents of an <b>EVENTLIST</b><spanstyle='font-weight:normal'> structure directly from the Matlab command line bytyping </span><b>EEG.EVENTLIST</b><span style='font-weight:normal'>. Here’s anexample:</span></p><p class=commandwindowtext>&gt;&gt; EEG.EVENTLIST</p><p class=commandwindowtext>&nbsp;</p><p class=commandwindowtext>ans = </p><p class=commandwindowtext>&nbsp;</p><p class=commandwindowtext>nbin: 2</p><p class=commandwindowtext>trialsperbin: [252 63]</p><p class=commandwindowtext>setname: 'CNT file_elist'</p><p class=commandwindowtext>report: 'ERPLAB Demo 3-09_REPORT.txt'</p><p class=commandwindowtext>bdfname: 'CNS Demo BDF.txt'</p><p class=commandwindowtext>version: '1.1.4'</p><p class=commandwindowtext>account: 'luck'</p><p class=commandwindowtext>username: ''</p><p class=commandwindowtext>elname: 'ERPLAB Demo 3-09.txt'</p><p class=commandwindowtext>bdf: [1x2 struct]</p><p class=commandwindowtext>eldate: '16-Jul-2009 09:22:37'</p><p class=commandwindowtext>eventinfo: [1x315 struct]</p><p class=commandwindowtext>&nbsp;</p><p class=paragraph>The information about the individual events is in <b>EEG.EVENTLIST.eventinfo</b><spanstyle='font-weight:normal'>, which is an array of sub-structures (one perevent). The fields in </span><b>EEG.EVENTLIST.eventinfo</b><spanstyle='font-weight:normal'> are as shown in the example below. Each of thefields in the text file has an obvious analog in the structure, except that thestructure also has an </span><b>spoint</b><span style='font-weight:normal'>field that is not found in the text file. This field stores the sample pointnumber (i.e., how many sample points have occurred since the beginning of thefile). The time of the sample is computed from this value, in conjunction withthe sampling rate (which is stored in </span><b>EEG.EVENTLIST.info.srate</b><spanstyle='font-weight:normal'>). The </span><b>bini</b><span style='font-weight:normal'> (bin index) field is an array of the bins to which the event has beenassigned (if any). <span style='background:aqua'>The </span></span><spanstyle='background:aqua'><b>item</b></span><span style='background:aqua'> fieldsimply indicates the item number of the event (event #1, event #2, etc.).</span></p><p class=commandwindowtext>ans = </p><p class=commandwindowtext>&nbsp;</p><p class=commandwindowtext>1x638 struct array with fields:</p><p class=commandwindowtext>code</p><p class=commandwindowtext>binlabel</p><p class=commandwindowtext>codelabel</p><p class=commandwindowtext>time</p><p class=commandwindowtext>spoint</p><p class=commandwindowtext>dura</p><p class=commandwindowtext>flag</p><p class=commandwindowtext>enable</p><p class=commandwindowtext>bini</p><p class=commandwindowtext><span style='background:aqua'>item</span></p><p class=literaltext style='tab-stops:right 49.5pt'><span style='font-size:8.0pt'>&nbsp;</span></p><p class=paragraph>The <b>EEG.EVENTLIST </b><span style='font-weight:normal'>structurealso contains several pieces of information that are filled by the BINLISTERroutine, including the name of the bin descriptor file (BDF; stored in </span><b>bdfname</b><spanstyle='font-weight:normal'>) and a list of the actual bin descriptors (storedin </span><b>bdf</b><span style='font-weight:normal'>). This can help youfigure out how a file was created when you come back to it at a later time.</span></p><h1 style='margin-left:.55in;text-indent:-.55in'><a name="_Ref110673938"></a><aname="_Toc111191544"></a><a name="_Boundary_Events_and"></a><aname="_Boundary_Events_and_1"></a><a name="_Boundary_Events_and_2"></a><aname="_Boundary_Events_and_3"></a>9.3.<span style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span>Boundary Events and DisabledEvents</h1><p class=paragraph>EEGLAB defines a special kind of event called a <b>boundary</b><spanstyle='font-weight:normal'> event that marks a discontinuity in the EEG data.For example, if you pause digitization between blocks of trials, a </span><b>boundary</b><spanstyle='font-weight:normal'> event will be placed at the first sample pointfollowing the pause. This is important, because there will usually be anartifactual jump in voltage across the boundary, and you would not want toinclude this segment of EEG data in your averaged ERPs. Filter artifacts canalso occur if boundaries are not taken into account during filter (see the <ahref="#_Filtering">filtering </a>section). ERPLAB has inherited and extendedthis concept. When you create an </span><b>EVENTLIST</b><span style='font-weight:normal'> structure from a dataset with the </span><b>ERPLAB &gt; EventList &gt;Create EventList</b><span style='font-weight:normal'> command, any </span><b>boundary</b><spanstyle='font-weight:normal'> events in the dataset will be included in the </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> structure, with an event code of -99 and a label of‘boundary’.</span></p><p class=paragraph>Boundary events are also inserted by EEGLAB when you deletesegments of EEG data using <b>Plot &gt; Channel data (scroll)</b><spanstyle='font-weight:normal'>. For example, you might delete segments of EEG thatcontain movement artifacts prior to ICA-based artifact correction, and </span><b>boundary</b><spanstyle='font-weight:normal'> events are inserted at the deletion points. Again,you would not want epochs containing these boundaries to be included in yourERP averages.</span></p><p class=paragraph><span style='background:aqua'>It is important to ensure thata boundary event is placed in the <b>EEG</b></span><span style='background:aqua'> structure at the boundaries between different trial blocks (assumingthat data collection was paused between blocks). If each block was originallystored in a separate data file, this will happen automatically if you appendthe files together into a single dataset using <b>Edit &gt; Append datasets</b></span><spanstyle='background:aqua'>. When you run this routine, EEGLAB will automaticallyinsert <b>boundary</b></span><span style='background:aqua'> events at theboundaries between the original datasets. However, if you record multipleblocks into a single file during data acquisition, your data acquisition systemmay not place a special event code between blocks to represent boundaries. Inthis case, you should have your stimulus presentation put a specific event codeat the appropriate time. Or, if your data acquisition program uses a differentcode for boundaries, you can use <b>ERPLAB &gt; EventList &gt; Create EventList(advanced)</b></span><span style='background:aqua'> to convert this code into acode of -99 and a label of ‘boundary’.</span></p><p class=paragraph><span style='background:aqua'>ERPLAB does several things toensure that data segments containing boundaries are excluded from the averagingprocess. First, when the BINLISTER routine assigns events to bins, it will notassign a given event to a bin if it encounters a boundary event in the sequenceof events that define the bin. For example, if Bin 1 is defined as event code100 followed 200-1000 ms later by event code 200, a given event code of 100will not be assigned to Bin 1 if a boundary event occurs between the event code100 and the event code 200. However, this does not eliminate a boundary if itoccurs after the response but before the end of the epoch. Thus, ERPLAB alsochecks for <b>boundary</b></span><span style='background:aqua'> events duringthe epoching process, excluding any epochs that have <b>boundary</b></span><spanstyle='background:aqua'> events at any point during the epoch. ERPLAB does afinal check during averaging, re-checking for <b>boundary</b></span><spanstyle='background:aqua'> events in the epoched data and excluding any epochsthat contain boundaries.</span></p><p class=paragraph>ERPLAB allows you to mark other kinds of problematic eventsusing the <b>enable</b><span style='font-weight:normal'> field of the </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> structure. <span style='background:aqua'>If you setthe </span></span><span style='background:aqua'><b>enable</b></span><spanstyle='background:aqua'> value to -1 for a given event, that event will betreated just like a boundary event (in BINLISTER, in bin-based epoching, and inaveraging).</span> In addition, it is also possible to set the <b>enable</b><spanstyle='font-weight:normal'> value to zero. This means that the event should beignored, as if it did not exist. This impacts the operation of BINLISTER, ofcourse, because events with an </span><b>enable</b><span style='font-weight:normal'> value of zero will be ignored. The bin-based epoching and averagingprocedures will also exclude any epochs when the </span><b>enable</b><spanstyle='font-weight:normal'> value for the time-locking event is sent to zero.However, if other events during the epoch have an </span><b>enable</b><spanstyle='font-weight:normal'> value of zero, those events are ignored, so theepoch will not be excluded. This is the main difference between </span><b>enable</b><spanstyle='font-weight:normal'> values of 0 and -1: the epoch will be excluded ifthe time-locking event has an </span><b>enable</b><span style='font-weight:normal'> value of either 0 or -1, but other events in the epoch will cause theepoch to be excluded only if they have an </span><b>enable</b><spanstyle='font-weight:normal'> value of -1. The logic here is that 0 means ignorethe event, and -1 means that the event contains invalid data.</span></p><h1 style='margin-left:.55in;text-indent:-.55in'><a name="_Toc111191545">9.4.</a><spanstyle='mso-bookmark:_Toc111191545'><span style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span>Editing and Importing anEventList</span></h1><p class=paragraph>A particularly important aspect of the <b>EVENTLIST</b><spanstyle='font-weight:normal'> structure is that events can be modified and thenread back into the current dataset, replacing the previous event codeinformation in the </span><b>EEG</b><span style='font-weight:normal'>structure. This makes it possible to add to your dataset information about stimuli,responses, physiological variables, or anything else that is not available fromthe event codes that were originally stored in the EEG file. For example,studies of motor processing often include EMG recordings, and the </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> structure makes it trivial to convert EMG bursts inthe </span><b>EEG</b><span style='font-weight:normal'> structure into eventcodes that can be used for EMG-locked averaging. It can also be used to mergeevents from a stimulus presentation system into the EEG structure. For example,the data file created by a stimulus presentation program might have informationabout responses that is not directly available in the EEG data file, and the </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> structure provides a conduit for adding thisinformation into a dataset. We plan to eventually include scripts for readingevent information from Presentation and E-Prime data files directly into the </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> structure; at this point, you would need to write acustom script for this.</span></p><p class=paragraph>There are two basic ways to modify the events in a dataset.First, one can directly modify the <b>EVENTLIST</b><span style='font-weight:normal'> structure (either from the Matlab command line or from a custom Matlabscript). After you’ve done this, you may wish to run the </span><b>ERPLAB &gt;Transfer eventinfo to EEG.type</b><span style='font-weight:normal'> command (orit’s script equivalent) so that EEGLAB functions will have access to the newevent information. Note that this will completely overwrite the previous eventinformation; but that’s OK, because you should have all of the original eventinformation in the </span><b>EVENTLIST</b><span style='font-weight:normal'>structure before you modify it.</span></p><p class=paragraph>The second way to modify the events is to save the EventListas a text file. You can then edit this file with a text editor. For example, ifyou gave the subject the wrong instructions for a portion of the datacollection period, you could edit the EventList File to change the <b>enable</b><spanstyle='font-weight:normal'> value to zero for the relevant event codes.Similarly, you could use a text editor to perform a global search-and-replaceto modify a particular event code value. You could also manually enter </span><b>boundary</b><spanstyle='font-weight:normal'> events in this manner. If you need to do somethingmore complicated, you could read the EventList text file into a program (inMatlab or some other programming environment), modify it, and then save theoutput in a new text file. After modifying the text file, you can read it backinto the </span><b>EVENTLIST</b><span style='font-weight:normal'> structure forthe current dataset with the </span><b>ERPLAB &gt; EventList &gt; ImportEventList from Text File</b><span style='font-weight:normal'> command. </span></p><p class=note>Important note: The header information at the beginning of anEventList text file should not be edited. Any changes you make to thisinformation will be ignored when the EventList file is read back into ERPLAB.</p><p class=paragraph>Here is a detailed description of how you would import theevents from a modified EventList text file back into ERPLAB:</p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>After editing the EventList file, make sure you save it beforeproceeding.</p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>In the EEGLAB window, choose <b>ERPLAB &gt; EventList &gt; ImportEventList from Text File</b></p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>A window will appear asking you to select the EventList file you wish tofeed into ERPLAB. Choose the newly edited version of your EventList File andclick ‘Open’.</p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>A confirmation message will appear asking, “Do you want to replace yourEEG.event field with this file?”. Choose ‘Yes’.</p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>The next window that appears asks you to name the new dataset you havecreated by importing your new EventList File with all of the new eventinformation. You must name the dataset. You also have the option of saving thenew dataset to your computer, overwriting the current dataset in memory, etc.</p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Once you have chosen the appropriate combination of options, click ‘Ok’.</p><p class=paragraph><span style='background:aqua'>To make your life easier,ERPLAB does not require the events in the EventList text file to be listed inorder of occurrence. Thus, you can add any new events at the end of the filerather than inserting them at the appropriate place. ERPLAB will use the onsettime of each event to determine when it occurred. The event number and the timedifference are ignored when you import the text file. ERPLAB will renumber theevents after you have imported them.</span></p><h1><a name="_Toc111191546"></a><a name="_Assigning_Events_to"></a>10.<spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Assigning Events to Bins with BINLISTER</h1><h1 style='margin-left:.55in;text-indent:-.55in'><a name="_Toc111191547">10.1.</a><spanstyle='mso-bookmark:_Toc111191547'><span style='font-size:7.0pt;font-family:"Times New Roman"'> </span>Overview of BINLISTER</span></h1><p class=paragraph>For the vast majority of experiments, you will use theBINLISTER routine to assign events to bins. Remember that each event in an <b>EVENTLIST</b><spanstyle='font-weight:normal'> structure contains a list of bins to which thatevent has been assigned. This typically starts out as an empty list (unless youperformed simple bin assignment when the </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> structure was first created). When you run theBINLISTER routine, the list of bins for each event is updated (except that thelist remains empty for any events that are not assigned to a bin). The data arelater epoched surrounding each of those events, and the averaging routineaverages together all of the epochs that have been assigned to a given bin.This is a somewhat complicated process, but this is a reflection of the varietyof ways in which one might want to sort the data for averaging.</span></p><p class=paragraph>The general approach used by BINLISTER is as follows. Usinga text editor, the user creates a text file that provides an abstractdescription of the kinds of event sequences that should be assigned to each bin(e.g., event code 20 preceded by event code 51 or 52 and followed 200-1500 mslater by event code 101). The abstract description for a given bin is called a <i>bindescriptor</i><span style='font-style:normal'>, and the file containing the bindescriptors is called a </span><i>bin descriptor file</i><spanstyle='font-style:normal'>. BINLISTER reads this file, and then scans the <b>EVENTLIST</b></span>structure. Each event is compared with each of the bin descriptors. If itmatches one or more of the bin descriptors, the list of bins for that event isupdated (in the <b>EVENTLIST.bini</b><span style='font-weight:normal'> field [<i>bini</i></span>stands for <i>bin indexes</i><span style='font-style:normal'>]).</span></p><p class=paragraph><i>Note that BINLISTER was created to emulate the ecdblprogram from ERPSS. Like ecdbl, BINLISTER is reasonably powerful and flexible,but it was designed with certain types of experiments in mind. As a result, itmay not work well for other types of experiments. When this happens, weencourage ERPLAB users to write their own programs for assigning events tobins. This should be relatively easy, because all of the relevant informationis easily available in the <b>EVENTLIST</b></i><span style='font-weight:normal'><i>structure. If you write a program of this nature that you think will be usefulto other labs, please send it to us and we will incorporate it into futureERPLAB releases.</i></span></p><h1 style='margin-left:.55in;text-indent:-.55in'><a name="_Toc111191548">10.2.</a><spanstyle='mso-bookmark:_Toc111191548'><span style='font-size:7.0pt;font-family:"Times New Roman"'> </span>Creating a Bin Descriptor File (BDF)</span></h1><p class=paragraph>A bin descriptor file (BDF) can be created in any texteditor. We recommend using a <b>.txt</b><span style='font-weight:normal'> fileextension.</span></p><p class=paragraph>To explain the BDF syntax, we will begin with the relativelysimple example shown below. In this example, there are green targets (eventcode 100), red standards (event code 101), and blue standards (event code 102).Subjects are asked to make a left-hand response (event code 201) for eitherstandard and to make a right-hand response (event code 202) for the target.Here are several bins that one might want to define for this experiment:</p><p class=literaltext>bin 1</p><p class=literaltext>Target preceded by standard (correct response)</p><p class=literaltext>{101;102}.{100}{t&lt;200-1000&gt;202}</p><p class=literaltext>&nbsp;</p><p class=literaltext>bin 2</p><p class=literaltext>Target preceded by standard (incorrect response)</p><p class=literaltext>{101;102}.{100}{t&lt;200-1000&gt;201}</p><p class=literaltext>&nbsp;</p><p class=literaltext>bin 3</p><p class=literaltext>Target with no response</p><p class=literaltext>.{100}{~t&lt;200-1000&gt;201;202}</p><p class=literaltext>&nbsp;</p><p class=literaltext>bin 4</p><p class=literaltext>Red standard preceded by either standard (correctresponse)</p><p class=literaltext>{101;102}.{101}{t&lt;200-1000&gt;201}</p><p class=literaltext>&nbsp;</p><p class=literaltext>bin 5</p><p class=literaltext>Blue standard preceded by either standard (correctresponse)</p><p class=literaltext>{101;102}.{102}{t&lt;200-1000&gt;201}</p><p class=literaltext>&nbsp;</p><p class=paragraph>Each bin descriptor contains three lines. The first linegives the bin number; the bins must be listed in ascending order starting withbin 1 (not with bin 0, as in ERPSS). The second line gives a writtendescription of the bin, which will be used for things like labeling waveformswhen the data are plotted. The third line provides the criteria for determiningwhether a given event should be assigned to that bin. It is conventional, butnot necessary, to place a blank line between the end of one bin descriptors andthe beginning of the next.</p><p class=paragraph><i>Sequences of events</i><span style='font-style:normal'>.Let’s begin by considering the criteria for the first bin,“{101;102}.{100}{t&lt;200-1000&gt;202}”. Each set of curly brackets (“{}”)defines an event. The event following the dot is the time-locking event, andthe preceding and following sets of curly brackets define the events that mustprecede and follow the time-locking event. In this example, the string “.{100}”indicates that the time-locking event for this bin must have an event code of100. Multiple event codes can be listed by giving a range (e.g., “{100-110}”)or by separating individual event code values with semicolons. Thus, the string“{101;102}.{100}” indicates that the time-locking event code 100 must beimmediately preceded by either a 101 or a 102. </span></p><p class=note>Note: We will eventually allow you to use event labels ratherthan event codes in bin descriptor files. This will lead to bin descriptorsthat look more like this: “{red_std ;blue_std}.{green_targ}{t&lt;200-1000&gt;targ_response}”.</p><p class=paragraph><i>Time-conditioned event lists</i><span style='font-style:normal'>. It is also possible to provide a time range for a set of event codesusing the syntax “t&lt;start&#8211;end&gt;ecode”, where <b>start</b></span> isthe starting time of the time range, <b>end</b><span style='font-weight:normal'>is the ending time, and </span><b>ecode</b><span style='font-weight:normal'> isthe event code (or list of event codes). This is called a <i>time-conditionedevent list</i></span>. In the present example, the string“.{100}{t&lt;200-1000&gt;202}” means that the time-locking event code of 100must be followed 200-1000 ms later by an event code of 202. Times are listed inmilliseconds.</p><p class=paragraph>When a time range is used, other event codes can be presentwithout disrupting the assignment of an event to a bin. Imagine, for example,in which a stimulus (event code 100) was supposed to be followed by tworesponses (event codes 201 and 202) on each trial, in any order. If you wantedbins in which they made the 202 response after the stimulus, irrespective ofwhether and when a 201 response was made, you could specify the sequence“.{100}{t&lt;200-1000&gt;202}”. This will work whether the sequence on a giventrials was 100-201-202, 100-202-201, or even 100-202 (as long as the 202 was 200-1000ms after the 100). When a time range is not specified, however, the exactsequence must be matched. Thus, “.{100}{ 202}” would not lead to a match if thesubject made the 201 response before the 202 response. There are several waysto deal with unpredictable sequences such as this. First, you could specifytime ranges instead of absolute sequences. Second, you could set the <b>enable</b><spanstyle='font-weight:normal'> value to 0 for all occurrences of event code 255(remember that BINLISTER completely ignores events in which </span><b>enable</b><spanstyle='font-weight:normal'> is set to 0). Third, you could tell BINLISTER toignore any occurrences of event code 255 (this is described in the nextsection). Finally, you could create two separate bins, one for when the 255 waspresent and one for when it was absent (e.g., Bin 1 could be defined as“.{100}{ 202}” and Bin 2 could be defined as “.{100}{255}{ 202}”). The two binscould then be merged into a single bin after averaging using </span><b>ERPLAB&gt; Bin Operations</b><span style='font-weight:normal'>.</span></p><p class=paragraph>If a time-conditioned event list appears prior to thetime-locking event, time flows backward from the time-locking event. That is,if you specify “{t&lt;200-800&gt;15}.{100}”, BINLISTER will search for an eventcode of 100 preceded by an event code of 15 that occurred 200-800 ms prior tothe 100.</p><p class=paragraph>If two time-conditioned event lists are used on one side ofthe time-locking point, both time and sequence are implied. That is,“.{100}{t&lt;200-1000&gt;201}{t&lt;400-1200&gt;202}” means that a 201 mustoccur 200-1000 ms after the 100, that a 202 must occur 400-1200 ms after the100,<i> and that the 202 must occur after the 201</i><span style='font-style:normal'>.</span></p><p class=paragraph><i>The not (~) operation</i><span style='font-style:normal'>.The tilde (~) character is used to mean </span><i>not</i><spanstyle='font-style:normal'>. That is, “{~101;102}.100” would mean that thetime-locking event of 100 must not be preceded by 101 or 102 (the </span><i>not</i><spanstyle='font-style:normal'> operation applies to all of the listed event codes; itwouldn’t make sense to say that it must not be 101 and must be 102, becausethat is the same as saying that it must be 102). The </span><i>not</i><spanstyle='font-style:normal'> operation can also be applied to a time range. Forexample, Bin 3 of the example above defines a target that is followed byneither of the two responses, which is specified as“.{100}{~t&lt;200-1000&gt;201;202}”.</span></p><p class=paragraph><i>Flags</i><span style='font-style:normal'>. BINLISTER canset and test the flag values from the <b>EVENTLIST</b></span>. For example, ifthe rightmost flag is set for trials containing artifacts, you could includeonly trials with artifacts by specifying “{100:f&lt;1&gt;}”. That is, the eventcode (or list of event codes) is followed by a colon and then the list of flagvalues inside “&lt;” and “&gt;” symbols. To exclude flagged trials, you coulduse the tilde to specify a <i>not</i><span style='font-style:normal'> operation,as in “{100:~f&lt;1&gt;}”. Alternatively, you could specify that the flag is azero, as in “{100:f&lt;0&gt;}”.</span></p><p class=paragraph>You do not need to specify all 16 flag values. As withdecimal numbers, you can leave out the zeroes at the left of the number (i.e.,just as the decimal number “0027” can be written as simply “27”, the binarynumber “000010” can be written simply as “10”). In addition, you can use an “x”instead of a “0” or “1” if a given flag should be ignored. For example, youwould specify “11x” to include the event if the third-to-right value is a 1,the second-to-right value is a 1, and it doesn’t matter whether the rightmostvalue is a 0 or a 1.</p><p class=paragraph>Another use of flags is to indicate different experimentalconditions (this is analogous to the use of “condition codes” in ERPSS). Forexample, imagine an experiment in which the target is green and the nontargetis red in the first half of the session, and the target is red and thenontarget is green in the second half of the session. You could use exactly thesame event codes in the two halves the session, but use different flag valuesto indicate the condition. For example, you could use event code 100 for greenand 101 for red. You could set the rightmost flag to 0 for events when greenwas the target and you could set this flag to 1 for events when red was thetarget (using a text editor). You could then have the following bindescriptors:</p><p class=literaltext>bin 1</p><p class=literaltext>Target- Green stimulus (target = green)</p><p class=literaltext>{100:f&lt;0&gt;}</p><p class=literaltext>&nbsp;</p><p class=literaltext>bin 2</p><p class=literaltext>Target- Red stimulus (target = red)</p><p class=literaltext>{101:f&lt;1&gt;}</p><p class=literaltext>&nbsp;</p><p class=literaltext>bin 3</p><p class=literaltext>Nontarget- Green stimulus (target = red)</p><p class=literaltext>{100:f&lt;1&gt;}</p><p class=literaltext>&nbsp;</p><p class=literaltext>bin 4</p><p class=literaltext>Nontarget- Red stimulus (target = green)</p><p class=literaltext>{101:f&lt;0&gt;}</p><p class=literaltext>&nbsp;</p><p class=paragraph>The syntax for a Bin Descriptor File is intended to beexactly like the syntax in ERPSS, except that there are no condition codes.However, some aspects of the syntax are not fully specified in the ERPSSdocumentation, so we cannot guarantee that BINLISTER and ecdbl will work inexactly the same way. Please see the BDF documentation in ERPSS for details ofthe syntax (we will eventually provide a more complete description of theBinLister implementation of this syntax).</p><h1 style='margin-left:.55in;text-indent:-.55in'><a name="_Toc111191549">10.3.</a><spanstyle='mso-bookmark:_Toc111191549'><span style='font-size:7.0pt;font-family:"Times New Roman"'> </span>Running BINLISTER</span></h1><p class=paragraph>Once you have created your bin descriptor file, you can runBINLISTER by selecting <b>ERPLAB &gt; Assign Bins (BINLISTER)</b><spanstyle='font-weight:normal'>. It will bring up the following window:</span></p><p class=MsoNormal style='margin-left:-4.5pt;text-align:justify'><spanstyle='font-size:11.0pt;color:red'><img border=0 width=396 height=296id="_x0000_i1032" src="ERPLAB_MANUAL_BETA114_files/image012.jpg"></span></p><p class=paragraph>You specify the bin descriptor file at the top of thewindow. Normally, BINLISTER reads the events from the <b>EEG.EVENTLIST</b><spanstyle='font-weight:normal'> structure, but it will instead read from anEventList text file if you provide the name of the file (leave this field blankto read from the </span><b>EEG.EVENTLIST</b><span style='font-weight:normal'>structure). In either case, the new bin information will be stored in the </span><b>EEG.EVENTLIST</b><spanstyle='font-weight:normal'> structure. It can also be saved in a text file (byentering a filename into the </span><b>Save new EventList as</b><spanstyle='font-weight:normal'> box).</span></p><p class=paragraph>If you want to update the event information in EEGLAB, youcan check the <b>Transfer EVENTLIST info…</b><span style='font-weight:normal'>box. This will allow you to view the EEG data with bin numbers rather thanevent codes or event labels (which is occasionally useful).</span></p><p class=paragraph>If you check the <b>Reset Flags</b><span style='font-weight:normal'> box, all of the flag values will be set to zero before BINLISTER runs.</span></p><p class=paragraph>The <b>Ignored Code(s)</b><span style='font-weight:normal'>field allows you to enter a list of event codes that will be completely ignored(just as if the </span><b>enable</b><span style='font-weight:normal'> valuewere set to 0). Similarly, the </span><b>Forbidden Code(s)</b><spanstyle='font-weight:normal'> field allows you to enter a list of event codesthat will be treated as invalid data (just as if the </span><b>enable</b><spanstyle='font-weight:normal'> value were set to -1 for all instances of thoseevent codes). </span></p><h1 style='margin-left:.55in;text-indent:-.55in'><a name="_Toc111191550"></a><aname="_Behavioral_Analyses"></a>10.4.<span style='font-size:7.0pt;font-family:"Times New Roman"'> </span>Behavioral Analyses</h1><p class=paragraph>ERPLAB does not yet have sophisticated tools for behavioralanalyses, although we plan to add a set of tools for behavioral analyseseventually. For now, you have two choices. First, you can write a script thatreads the event information from the <b>EVENTLIST</b><span style='font-weight:normal'> structure (or from a text file created from an </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> structure) and performs the desired analyses.Second, you can take the information provided by BINLISTER about the timing andaccuracy of behavioral responses and read this into Excel or a Matlab script.</span></p><p class=paragraph><u>Analyzing Accuracy</u>. Behavioral accuracy informationcan be obtained very easily running BINLSTER and then either using theresulting <b>EVENTLIST</b><span style='font-weight:normal'> list structuredirectly or by saving it as a text file. The </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> structure contains information about the number oftrials that were present in each bin. If you have some bins that are correctresponses and others that are incorrect responses, you can calculate theproportion correct. When you save the </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> structure in a text file, the format of the fileheader was designed to make it relatively easy to read this information intoExcel or into a MATLAB script.</span></p><p class=paragraph>For example, for a simple oddball experiment with standardsand targets, you might define the following bins:</p><p class=literaltext># 100 = target; 101 = standard; 200 = response for target;201 = response for standard</p><p class=literaltext>&nbsp;</p><p class=literaltext>Bin 1</p><p class=literaltext>Target followed by correct response</p><p class=literaltext>.{100}{t&lt;200-1000&gt;200}</p><p class=literaltext>&nbsp;</p><p class=literaltext>Bin 2</p><p class=literaltext>Target followed by incorrect response</p><p class=literaltext>.{100}{t&lt;200-1000&gt;201}</p><p class=literaltext>&nbsp;</p><p class=literaltext>Bin 3</p><p class=literaltext>Standard followed by correct response</p><p class=literaltext>.{101}{t&lt;200-1000&gt;201}</p><p class=literaltext>&nbsp;</p><p class=literaltext>Bin 4</p><p class=literaltext>Standard followed by incorrect response</p><p class=literaltext>.{101}{t&lt;200-1000&gt;200}</p><p class=literaltext>&nbsp;</p><p class=paragraph>After running BINLISTER, the number of occurrences of eachof these bins is stored in <b>EEG.EVENTLIST.trialsperbin</b><spanstyle='font-weight:normal'>, which you could use to compute the proportioncorrect for targets and for standards (or d’, or A’, or any other parameter youwould like). If you save the </span><b>EVENTLIST</b><span style='font-weight:normal'> as a text file, this information would be just after the header, andit would look something like this:</span></p><p class=literaltext>bin 1,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #18,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Target followed by correct response </p><p class=literaltext>bin 2,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #2,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Target followed byincorrect response </p><p class=literaltext>bin 3,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #74,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Standard followed by correct response </p><p class=literaltext>bin 4,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #6,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Standard followed byincorrect response </p><p class=literaltext>&nbsp;</p><p class=paragraph>In this example, there were 18 instances of a targetfollowed by a correct response, 2 instances of a target followed by anincorrect response, 74 instances of a standard followed by a correct response,and 6 instances of a standard followed by an incorrect response. Thisinformation could be imported into Excel (or a Matlab script, or anything thatcan read a text file) for further analysis.</p><p class=paragraph><u>Analyzing Reaction Times</u>. For reaction times (RTs),you can use a special aspect of the BDF syntax to save single-trial RTs to aset of text files. For example, imagine that you have a simple oddballexperiment with targets and standards. You could save the RT for each targettrial in a file named “target_rt” and the RT for each standard trial in a filenamed “standard_rt” using the “:op&gt;filename” syntax as follows:</p><p class=literaltext># 100 = target; 101 = standard; 200 = response for target;201 = response for standard</p><p class=literaltext>&nbsp;</p><p class=literaltext>Bin 1</p><p class=literaltext>Target followed by correct response</p><p class=literaltext>.{100}{t&lt;200-1000&gt;200:op&gt;target_rt}</p><p class=literaltext>&nbsp;</p><p class=literaltext>Bin 2</p><p class=literaltext>Standard followed by correct response</p><p class=literaltext>.{101}{t&lt;200-1000&gt;201:op&gt;standard_rt}</p><p class=literaltext>&nbsp;</p><p class=paragraph>When BINLISTER encounters an event that matches a givendescriptor, the “op” syntax causes the time of the event to which it is linked(e.g., the response event code) to be saved to the named text file (in thecurrent directory). The time is given relative to the time of the time-lockingevent (e.g., relative to the target stimulus). Each RT is appended onto the endof the named file, so you will typically use different files to store the RTsfrom different trial types. Of course, you will probably want to store the datafrom each subject in a separate file. You can then load the single-trial RTsinto Excel or a Matlab script to obtain each subject’s mean RT (or median, orwhatever you’d like).</p><p class=paragraph><span style='background:aqua'><u>Excluding Trials withArtifacts or Invalid EEG Data</u>. In many cases, you will want your behavioralanalyses to be based on the same trials that were included in your averaged ERPwaveforms, which means that trials that were rejected from the averages need tobe excluded from your behavioral analyses. This can be accomplished fairlyeasily with ERPLAB. When you use ERPLAB’s artifact detection functions, you canspecify that a flag in the <b>EVENTLIST</b></span><span style='background:aqua'>be set for trials that are rejected. You can then use the modified <b>EVENTLIST</b></span><spanstyle='background:aqua'> structure (or save it to a text file) and perform yourbehavioral analysis on the trials for which this flag is not set.</span></p><p class=paragraph><span style='background:aqua'>This could be done either bywriting a script that reads in the information from the <b>EVENTLIST</b></span><spanstyle='background:aqua'> structure or by running BINLISTER again using a bindescriptor file that is designed to use the information about artifactrejection that has been stored in the flags. For example, if the rightmost flaghas been set for events with artifacts, you could use the following syntax toexclude trials with artifacts.</span></p><p class=literaltext><span style='background:aqua'>&nbsp;</span></p><p class=literaltext><span style='background:aqua'>Bin 1</span></p><p class=literaltext><span style='background:aqua'>Target without an artifactfollowed by correct response</span></p><p class=literaltext><span style='background:aqua'>.{100:f&lt;0&gt;}{t&lt;200-1000&gt;200}</span></p><p class=literaltext><span style='background:aqua'>&nbsp;</span></p><p class=literaltext><span style='background:aqua'>Bin 2</span></p><p class=literaltext><span style='background:aqua'>Target without an artifactfollowed by incorrect response</span></p><p class=literaltext><span style='background:aqua'>.{100:f&lt;0&gt;}{t&lt;200-1000&gt;201}</span></p><p class=paragraph>&nbsp;</p><p class=paragraph><span style='background:aqua'>In this example, <b>f&lt;0&gt;</b></span><spanstyle='background:aqua'> means that the rightmost flag has a value of zero(i.e., it has not been set to a value of 1). Note that, when an artifact isdetected for a given epoch, the flag is set for the time-locking event, not forthe other events that are used to define a given bin (e.g., the response eventsin this example).</span></p><p class=paragraph><span style='background:aqua'>It is important to keep inmind that BINLISTER is ordinarily used to assign events to bins prior toepoching the data, and it will not run on an epoched dataset. However, artifactdetection can be performed only after the data have been epoched. Thus, to useBINLISTER to perform behavioral analyses after epoching and artifact detection,is necessary to first save the <b>EVENTLIST</b></span><span style='background:aqua'> structure in a text file. BINLISTER can then read from this text fileand save its output to a new text file. The new <b>EVENTLIST</b></span><spanstyle='background:aqua'> structure also remains available in the workspace, soyou can access it directly from a script if you would like.</span></p><h1><a name="_Toc111191551"></a><a name="_Epoching_Bins"></a>11.<spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Epoching Bins</h1><p class=paragraph>In the previous step, you assigned events to different bins.In this step you will convert the continuous EEG into a set of finite-duration“epochs” surrounding each of the event codes that will later be averaged intothe various bins. When you run the function <b>ERPLAB &gt; Extract Bin-BasedEpochs</b><span style='font-weight:normal'>, you tell ERPLAB the time range touse when creating the epochs. Later, in the <a href="#_Compute_Averaged_ERPs">averagingstep</a>, all of the epochs in one bin will be averaged together. </span></p><p class=note>You should keep in mind that ERPLAB will convert the starting andending times of the epoch that you specify in milliseconds into thecorresponding sample points, but these may not be at exactly the millisecondvalues you specify. For example, if you sampled at 250 Hz (4 ms per sample),and you specified an epoch of -25 to +150 ms, the actual starting and endingpoints cannot be at -25 and +150 ms because there are no samples at these exacttimes (i.e., neither -25 nor +150 is an integer multiple of 4). ERPLAB willfind the nearest sample points, which in this case would be -24 and +152 ms.Also, the number of sample points may not be what you expect. If, for example,you sample at 1000 Hz and specify an epoch of 0 to 1000 ms, this will actuallyend up being 1001 data points (because there are sample points at 0 ms, 1 ms, 2ms, and so on up to and including 1000 ms).</p><p class=paragraph>When you epoch the data, you will be given the option toperform baseline correction. The baseline correction process typicallysubtracts the mean prestimulus voltage (or the voltage over some other rangethat you specify) from the entire waveform for channel in each epoch. Thiseliminates any overall voltage offset from the waveform. In many ERP analysissystems, this is an absolutely essential step, because artifacts are rejectedby determining whether the voltage in a given epoch exceeds some fixed value.If you don’t first remove the overall voltage offset, many trials will beunnecessarily rejected. In addition, the baseline correction step is typicallyused to avoid seeing the voltage offset when the data are plotted. In ERPLAB,baseline correction is needed only if you are using fixed voltage thresholdsfor artifact rejection; none of the other artifact rejection functions areinfluenced by voltage offsets. Also, all ERPLAB operations performed on theaveraged waveforms that involve the baseline (including plotting) require thata baseline period be specified, which essentially causes baseline correction tobe applied more explicitly (which is good for making sure the user is awarethat the baseline is relevant at every stage of processing). Thus, baselinecorrection is not as important in ERPLAB as in most other systems. However, itdoes no harm to perform baseline correction at the epoching stage, and it mayeliminate confusion if the epoched data are ever exported to another system.Thus, we recommend that you perform baseline correction during the epochingprocess. The epoching GUI looks like this:</p><p class=paragraph><img border=0 width=204 height=143 id="_x0000_i1033"src="ERPLAB_MANUAL_BETA114_files/image013.gif"></p><p class=paragraph>To epoch your data, follow these steps:</p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Choose <b>ERPLAB &gt; Extract Bin-Based Epochs</b></p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>A window will appear in which you will enter a time range. Time zerowill be the time of the time-locking event, and the time range must includetime zero. For example, we may want an epoch that includes the points that fallbetween 200 ms prior and 800 ms after each event code. In this case, we wouldenter ‘-200 800’ into the field. </p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>The <b>Baseline correction</b><span style='font-weight:normal'> optionallows you to enable or disable baseline correction. If enabled, you can selectthe period that will be used for baseline correction. If you select </span><b>Pre</b><spanstyle='font-weight:normal'>, the prestimulus baseline period will be used (thisis the default). You could instead select </span><b>Post</b><spanstyle='font-weight:normal'> to use the poststimulus period or </span><b>Whole</b><spanstyle='font-weight:normal'> to select the entire epoch. Finally, you couldselect </span><b>Custom</b><span style='font-weight:normal'> and then providetwo numbers that specify the beginning and end of the baseline period (e.g., </span><b>-5050</b><span style='font-weight:normal'> to use the interval from -50 ms to +50ms). The baseline period must be entirely within the period of the epoch. Forwhatever period you select, the mean voltage over this period will besubtracted from the waveform for a each epoch (separately for each channel). </span></p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>You will then get the standard window for naming and saving the newdataset that will be created.</p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>If you would like to plot the epoched dataset, go to <b>Plot &gt;Channel data (scroll)</b><span style='font-weight:normal'>. Note that thisEEGLAB function will plot multiple epochs side by side, with a dashed lineseparating adjacent epochs. This can be a little bit confusing, because itlooks quite similar to a plot of continuous data (see screenshot below).</span></p><p class=paragraph><img border=0 width=468 height=318 id="_x0000_i1034"src="ERPLAB_MANUAL_BETA114_files/image014.gif"></p><p class=paragraph><span style='background:aqua'>When the data are epoched,only those event codes that are time-locking events for bins remain in thedataset; epochs are not created for event codes that are not assigned to bins.For example, if you are doing stimulus-locked averages, you will not assignyour response event codes to any bins, and no epochs will be created using theresponse event codes as the time-locking event. To avoid confusion, thesenon-time-locking events are eliminated from the <b>EEG.event</b></span><spanstyle='background:aqua'> structure.</span></p><p class=paragraph><span style='background:aqua'>However, all of the eventsremain in the <b>EVENTLIST</b></span><span style='background:aqua'> structure.Internally, ERPLAB keeps track of which epochs in the epoched datasetcorrespond with which events in the <b>EVENTLIST</b></span><spanstyle='background:aqua'> structure. This is how the flags for a given event in the<b>EVENTLIST</b></span><span style='background:aqua'> structure can be set whenan artifact is detected in the corresponding epoch in the dataset. Most usersdo not need to know the details of this bookkeeping, but here is a briefdescription for experts. Each event in the event list contains an <b>EVENTLIST.eventinfo.item</b></span><spanstyle='background:aqua'> field, and this field indicates the item number of theevent (e.g., first item, second item, etc.). This same information is stored inthe <b>EEG.event.item</b></span><span style='background:aqua'> field and in the<b>EEG.epoch.eventitem</b></span><span style='background:aqua'> field (where itindicates the item number of the time-locking event for each epoch). Thus, eachtime-locking event from the epoched <b>EEG</b></span><span style='background:aqua'> structure has an item number that matches exactly one of the items inthe <b>EVENTLIST</b></span><span style='background:aqua'> structure. However,many items in the <b>EVENTLIST</b></span><span style='background:aqua'> structuredo not have a matching item in the epoched <b>EEG</b></span><spanstyle='background:aqua'> structure (because events that are not time-lockingevents have been eliminated from the epoched <b>EEG</b></span><spanstyle='background:aqua'> structure but remain in the <b>EVENTLIST</b></span><spanstyle='background:aqua'> structure).</span></p><p class=paragraph><span style='background:aqua'>The epoching process alsoreplaces the event code labels in the <b>EEG</b></span><span style='background:aqua'> structure with a string that indicates the bin to which the epoch hasbeen assigned (see screenshot above). The original event code or event label isalso provided (in parentheses) for your information. For example, if an eventcode of 100 was assigned to Bin 1, the label for this event code would bechanged to <b>B1(100)</b></span><span style='background:aqua'>. If a givenevent code is assigned to multiple bins, the bins are separated by commas. Thatis, if an event code of 100 was assigned to Bins 1 and 7, the label for thisevent code would be changed to <b>B1,7(100)</b></span><span style='background:aqua'>. If you have defined labels for your event codes, these labels are usedinstead of event codes (e.g., <b>B1,7(target)</b></span><span style='background:aqua'>). These bin labels are used during the averaging process, so you shouldnot change them. Once you have epoched your data, you cannot replace these binlabels with event codes or event labels using <b>ERPLAB &gt; Transfer eventinfoto EEG.type</b></span><span style='background:aqua'>.</span></p><h1><a name="_Toc111191552">12.</a><span style='mso-bookmark:_Toc111191552'><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Creating New Channels in the EEG</span></h1><p class=paragraph>It is often convenient to compute bipolar channels from themonopolar channels in the EEG and apply artifact rejection to the bipolarchannels. For example, one might create a bipolar channel representing thedifference between an electrode above the eyes and an electrode below the eyes,which makes it easier to detect blinks. The <b>ERPLAB &gt; EEG ChannelOperations</b><span style='font-weight:normal'> function that makes this veryeasy. As illustrated in the screenshot below, this function puts up a windowthat allows you to specify the new channels. Imagine, for example, that youwant to create a new bipolar VEOG channel by computing channel 32 minus channel31. If you had 32 channels of data originally, you would want the new channelto be channel 33. You would specify the new channel as “ch33 = ch32 &#8211;ch31 label VEOG”. This says that ERPLAB should create a new channel 33, definedas channel 32 minus channel 31, and it should be labeled “VEOG”. If channel 33already exists, ERPLAB will ask you if you wish to overwrite the old channelwith the new waveform. It is also possible to precede the channels on the rightside of the equals sign with coefficients. For example, you could type “ch33 =0.5*ch31 + 0.5*ch32 label AVGCHAN” &#8211; this would create a new channel 33that is the average of channels 31 and 32, with the label “AVGCHAN”. When youlaunch the GUI, you can click the </span><b>Examples</b><span style='font-weight:normal'> button to remind yourself of the syntax.</span></p><p class=MsoNormal align=center style='margin-left:-4.5pt;text-align:center'><spanstyle='font-size:11.0pt'><img border=0 width=467 height=222 id="_x0000_i1035"src="ERPLAB_MANUAL_BETA114_files/image015.jpg"></span></p><h1><a name="_Toc111191553">13.</a><span style='mso-bookmark:_Toc111191553'><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Artifact Detection</span></h1><p class=note>Note: The full user interface for artifact detection is not yetcomplete, but a usable version of a few key artifact detection functions isavailable in this version.</p><p class=paragraph>The combination of EEGLAB and ERPLAB yields severaldifferent ways to detect and reject artifacts. It is important to distinguishbetween <i>artifact rejection</i><span style='font-style:normal'> and </span><i>artifactdetection</i><span style='font-style:normal'>. Most of the routines describedin this section <u>detect</u> epochs that contain artifacts and mark them inthe <b>reject</b></span> field of the <b>EEG</b><span style='font-weight:normal'>structure (in the <i>EEG.reject.rejmanual</i></span> and <i>EEG.reject.rejmanualE</i><spanstyle='font-style:normal'> fields). The epochs still remain in the dataset.Rejection occurs during averaging. That is, epochs marked for rejection are notincluded in the ERP averages.</span></p><p class=paragraph>Direct rejection can be accomplished visually from EEGLAB’s <b>Plot&gt; Channel data (scroll)</b><span style='font-weight:normal'> routine, asshown in the following screenshots. As you scroll through the data, you candrag the mouse pointer across sections of data that contain artifacts. Thiswill highlight those sections of data. Once you have selected all of the to-be-rejecteddata segments within a dataset, you can click on the </span><b>REJECT</b><spanstyle='font-weight:normal'> button. This causes EEGLAB to create a new datasetin which the marked segments are completely deleted, with a </span><b>boundary</b><spanstyle='font-weight:normal'> code inserted to mark the places in which segmentshave been deleted (see <a href="#_Boundary_Events_and_2">the section onboundary events</a>). Once deleted, these segments are gone forever (althoughthey are still present in the original dataset). This approach is particularlyuseful for deleting sections of “crazy” data prior to ICA-based artifactcorrection. It is not recommended as the way to perform conventional artifact </span><!--[if gte vml 1]><v:shape id="_x0000_s1028" type="#_x0000_t75" alt="" style='position:absolute;left:0; text-align:left;margin-left:0;margin-top:0;width:240pt;height:163pt;z-index:3; mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt; mso-wrap-distance-bottom:0;mso-position-horizontal:left; mso-position-horizontal-relative:text;mso-position-vertical-relative:line' o:allowoverlap="f"> <v:imagedata src="ERPLAB_MANUAL_BETA114_files/image016.gif"/> <w:wrap type="square" anchorx="page"/></v:shape><![endif]--><![if !vml]><img width=240 height=163src="ERPLAB_MANUAL_BETA114_files/image016.gif" align=left hspace=9 v:shapes="_x0000_s1028"><![endif]>rejection.</p><p class=paragraph><img border=0 width=240 height=163 id="_x0000_i1036"src="ERPLAB_MANUAL_BETA114_files/image017.gif"></p><p class=paragraph>&nbsp;</p><p class=paragraph>For conventional artifact rejection, EEGLAB contains severalartifact detection functions, and ERPLAB adds a set of additional artifactdetection functions that are analogous to the ERPSS artifact detectionfunctions. You can use both the EEGLAB and ERPLAB functions, because they allend up marking artifacts in the same way so that they are excluded from theaveraged ERPs.</p><p class=paragraph>The data must be epoched before the artifact detectionfunctions can be applied. </p><p class=paragraph>Artifact detection is best conceived as a signal detectionproblem, in which evidence for a signal (the artifact) is compared against athreshold to make a present/absent decision (for a general overview of thisconceptualization, see pp. 152-154 in Luck, 2005, <i>An Introduction to theEvent-Related Potential Technique</i><span style='font-style:normal'>). ERPLABcontains several different artifact detection functions, each of which isdesigned to detect a specific type of artifact (e.g., blinks, eye movements,EMG bursts, etc.). To determine whether an EEG epoch contains an artifact, afunction is applied to the data from that epoch. This function returns a value,which is related to the strength of evidence for the presence of a specificartifact in that epoch. This value is then compared with a threshold, and theepoch is marked for rejection if the value exceeds the threshold. The functionis applied to a single channel at a time, and EEGLAB keeps track of whichchannels contained artifacts. However, the entire trial is excluded from the ERPaverages if one or more channels contains an artifact.</span></p><p class=paragraph>There are several artifact rejection routines that arespecialized for detecting different types of artifacts. Each can operate on anysubset of the channels (or all of the channels). Eventually, you will be ableto run all of the artifact detection functions together, saving the parametersin a file so that they can be used again. In the current version, however, youmust run each function separately. The epochs that were marked for rejection byone function will stay rejected when you run the next function. If you want tostart over, you can clear all the rejections by selecting <b>ERPLAB &gt;Artifact Detection &gt; Reset Artifact Detection</b><span style='font-weight:normal'> (see screenshot below). This function allows you to clear EEGLAB’s artifactrejection marks in the </span><b>EEG</b><span style='font-weight:normal'>structure and to clear specific flags in the </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> structure.</span></p><p class=paragraph><img border=0 width=337 height=162 id="_x0000_i1037"src="ERPLAB_MANUAL_BETA114_files/image018.gif"></p><h1 style='margin-left:.55in;text-indent:-.55in'><a name="_Toc111191554">13.1.</a><spanstyle='mso-bookmark:_Toc111191554'><span style='font-size:7.0pt;font-family:"Times New Roman"'> </span>The Moving Window Peak-to-Peak Function</span></h1><p class=paragraph>The simplest artifact detection function supplied by ERPLABis the moving window peak-to-peak threshold. Peak-to-peak amplitude is thedifference between the most positive and most negative voltages within awindow. A moving window peak-to-peak amplitude function computes thepeak-to-peak amplitude within a series of windows within each epoch. Forexample, if your epoch goes from -200 to +796 ms, as in the screenshot below,you could select a window size of 200 ms and a step size of 20 ms. For eachepoch, the routine would calculate the peak-to-peak voltage from -200 to 0 ms<aname="_ftnref3"></a><a href="#_ftn3"><span style='mso-bookmark:_ftnref3'><spanclass=MsoFootnoteReference>[3]</span></span><span style='mso-bookmark:_ftnref3'></span></a><spanstyle='mso-bookmark:_ftnref3'></span>, from -180 to +20 ms, from -160 to +40ms, etc. The routine would find the largest peak-to-peak amplitude from thesewindows for a given epoch of data, compare that largest value with a thresholdvalue, and mark the trial for rejection if the largest value exceeds thethreshold.</p><p class=paragraph><!--[if gte vml 1]><v:shape id="_x0000_s1029" type="#_x0000_t75" alt="" style='position:absolute;left:0;text-align:left;margin-left:0; margin-top:0;width:91pt;height:157pt;z-index:4;mso-wrap-distance-left:9pt; mso-wrap-distance-top:0;mso-wrap-distance-right:9pt; mso-wrap-distance-bottom:0;mso-position-horizontal:left; mso-position-horizontal-relative:text;mso-position-vertical-relative:line' o:allowoverlap="f"> <v:imagedata src="ERPLAB_MANUAL_BETA114_files/image019.gif"/> <w:wrap type="square" anchorx="page"/></v:shape><![endif]--><![if !vml]><img width=91 height=157src="ERPLAB_MANUAL_BETA114_files/image019.gif" align=left hspace=9 v:shapes="_x0000_s1029"><![endif]>Theparameters to the routine are shown in the screenshot to the left. The <b>Testperiod (ms)</b><span style='font-weight:normal'> field is the overall epochperiod that will be tested (in milliseconds). This must be less than or equalto the epoch length of the data (the default is the entire epoch). The </span><b>Voltagethreshold (µV)</b><span style='font-weight:normal'> field specifies the thresholdfor rejection; any epoch that exceeds this threshold will be rejected. In thisexample, we’ve entered 35 µV, so any epochs with a peak-to-peak amplitude of&gt;35 µV will be rejected.</span></p><p class=paragraph>The <b>Moving window full width (ms)</b><spanstyle='font-weight:normal'> in this example was set to 200 ms, which means thatthe routine will look for the peak-to-peak amplitude within successive 200-mswindows. The </span><b>Window Step (ms)</b><span style='font-weight:normal'>value is the size of the step between successive windows; here we’ve chosen 50ms, meaning that the windows will start at -200 ms, -180 ms, -160 ms, etc. Asmaller step size is slightly more likely to catch artifacts, but makes theroutine run more slowly. The </span><b>Channel(s)</b><span style='font-weight:normal'> field is used to list the channels that will be tested. The default isall channels. You can list individual channels separated by spaces (e.g., </span><b>13 4 8 19 22</b><span style='font-weight:normal'>) or you can provide ranges ofchannels (e.g., </span><b>1:14</b><span style='font-weight:normal'>). In thisexample, the routine was applied only to Channel 1, which was the vertical EOG(referenced to a mastoid electrode). Thus, in this example we are trying toreject trials with eyeblinks.</span></p><p class=paragraph>The final field is the <b>Flag</b><span style='font-weight:normal'>; this indicates which flag in the </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> structure will be set for epochs marked forrejection (0 is the default, meaning that no flags will be set). These flagscan be used to count the number of artifacts of each type (more on this later).This is not the same as the flag in the </span><b>EEG</b><spanstyle='font-weight:normal'> structure that is used by EEGLAB to determine whichtrials have been rejected; this flag will be set irrespective of your </span><b>Flag</b><spanstyle='font-weight:normal'> value. </span></p><p class=paragraph>Once you click <b>OK</b><span style='font-weight:normal'>, theroutine will test all epochs in the current dataset. After all epochs have beenchecked, it will print a summary of the number of trials rejected in each binin the Matlab command window. (You can also get this information afteraveraging by looking at the </span><b>ERP.ntrials</b><span style='font-weight:normal'> field). The routine also puts up the </span><b>Plot &gt; Channel data(scroll)</b><span style='font-weight:normal'> window so that you can checkwhether the artifact rejection worked properly. You should <u>always</u> dothis &#8211; artifacts vary considerably across subjects, and parameters thatwork for one subject may not work for another. </span></p><p class=paragraph>Five epochs of data are shown in the screenshot below.Epochs that are rejected are shaded in yellow, and the channels within an epochthat are responsible for the rejection have their waveforms drawn in red. Youcan see that two of the epochs are rejected. You can manually “unreject” anepoch by simply clicking on it, which will cause the yellow shading todisappear. You can also manually reject an unrejected epoch by clicking on it,which will cause the yellow shading to appear. In most cases we do notrecommend this sort of manual rejection, because it may lead to bias. However,it can be useful in certain cases, and bias can be eliminated by ensuring thatthe person doing the rejection is blind to the experimental conditions.</p><p class=note>Note: When you manually reject and/or unreject epochs, the flagsin <b>EEG.EVENTLIST</b><span style='font-weight:normal'> are not updated toreflect these changes. The </span><b>EEG.EVENTLIST</b><span style='font-weight:normal'> flags are not used to determine which trials to include or excludeduring averaging, so this is not a problem for most purposes. However, it couldbe a problem if you are using the flags to determine, for example, which trialsto include or exclude from subsequent behavioral analyses. The bottom line:Don’t do manual rejection if you plan to use the </span><b>EEG.EVENTLIST</b><spanstyle='font-weight:normal'> flags.</span></p><p class=note><img border=0 width=468 height=318 id="_x0000_i1038"src="ERPLAB_MANUAL_BETA114_files/image020.gif"></p><p class=paragraph>In addition to putting up this window for viewing the data,the artifact detection routine will put up a window allowing you to choosewhether you want to keep the new dataset that it created. If you are satisfiedwith the rejection, you should keep the dataset (and you may also want to saveit to disk). If you are not satisfied, you can cancel and try again with newparameters.</p><p class=paragraph>In the example shown in the screenshot below, the windowsize was set to 1000 ms. That is, the routine found the difference between themost positive and most negative points over the entire 1000-ms window ratherthan using a smaller sliding window. You should notice that the first of thetwo rejected epochs probably should not have been rejected. The polarity of thevoltage deflection is the same in the VEOG channel and in the F3 channel; atrue blink exhibits opposite polarity under versus over the eye, so this is nota blink. The second of the two rejected epochs shows this polarity inversion,and is a true blink. We would like to reject true blinks and not other voltagedeflections. Using a smaller sliding window rather than a single broad windowcan help with this, because a true blink has a large voltage deflection withina narrow time window. When we changed the window size from 1000 ms to 200 ms,only the second of these two trials was marked for rejection. The voltagechanged gradually over the epoch in the first of these two epochs, and so thisepoch was no longer rejected. The lesson here is that you should use a longwindow if you want to be sensitive to both gradual and sudden changes involtage, whereas you should use a short window if you want to be sensitive torelatively sudden changes.</p><p class=paragraph>Imagine that you wanted to use this function to detect bothblinks in the VEOG channel and large voltage excursions (C.R.A.P.) in all ofthe other channels. However, if you set the threshold low enough to detect allblinks in the VEOG channel, it will end up rejecting perfectly fine trials inthe other channels (e.g., trials with large P3 deflections). To solve thisproblem, you can simply run this routine twice, once applying it to the VEOGchannel with a relatively low threshold (e.g., 30 µV), and once on all of theother channels with a relatively high threshold (e.g., 100 µV). The rejectionmarks accumulate each time you run an artifact rejection routine (until youclear them with <b>ERPLAB &gt; Artifact Detection &gt; Reset Artifact Detection</b><spanstyle='font-weight:normal'>). Thus, you can use the various artifact detectionroutines in any combination, with any set of parameters, until you have markedall of the artifacts for rejection.</span></p><p class=paragraph>&nbsp;</p><p class=paragraph>&nbsp;</p><p class=paragraph>(Note for ERPSS aficionados: ERPSS stops looking forrejections in a given epoch once any artifact test fails, but ERPLAB alwaysperforms all artifact rejection tests. This is necessary to mark all channelsthat contain artifacts, as described in the preceding paragraph.)</p><h1 style='margin-left:.55in;text-indent:-.55in'><a name="_Toc111191555">13.2.</a><spanstyle='mso-bookmark:_Toc111191555'><span style='font-size:7.0pt;font-family:"Times New Roman"'> </span>The Blink Detection Function</span></h1><p class=note>Note: This function is not yet implemented as described here, sowe recommend that you do not use it in this version.</p><p class=paragraph><!--[if gte vml 1]><v:shape id="_x0000_s1030" type="#_x0000_t75" alt="" style='position:absolute;left:0;text-align:left;margin-left:0; margin-top:0;width:195pt;height:189pt;z-index:5;mso-wrap-distance-left:9pt; mso-wrap-distance-top:0;mso-wrap-distance-right:9pt; mso-wrap-distance-bottom:0;mso-position-horizontal:left; mso-position-horizontal-relative:text;mso-position-vertical-relative:line' o:allowoverlap="f"> <v:imagedata src="ERPLAB_MANUAL_BETA114_files/image021.gif"/> <w:wrap type="square" anchorx="page"/></v:shape><![endif]--><![if !vml]><img width=195 height=189src="ERPLAB_MANUAL_BETA114_files/image021.gif" align=left hspace=9 v:shapes="_x0000_s1030"><![endif]>Thisfunction finds artifacts that are shaped like a typical blink, which we representby a Chebyshev function of a specific width. To find this shape, the functioncomputes the covariance between a segment (window) of the epoch and theChebyshev function. The larger the covariance, the more evidence we have that alarge blink-shaped voltage deflection is present in that window. Imagine, forexample, that you specify a <b>Blink Width</b><span style='font-weight:normal'>of 400 ms and a </span><b>Test Period</b><span style='font-weight:normal'> of-200 to 796 ms, as shown in the screenshot to the left. The function wouldfirst compute the covariance between a 400-ms wide Chebyshev function and theEOG waveform from -200 to +196 ms. If you have specified a </span><b>WindowStep</b><span style='font-weight:normal'> of 20 ms, the function would thencompute the covariance between the Chebyshev function and the EOG data from-180 to +216 ms. It would continue this process for successive 400-ms windows.It then compares the largest of these covariance values to the threshold, andthe epoch is marked for rejection if the largest covariance exceeds thethreshold.</span></p><p class=paragraph>What happens if the blink started before the epoch began, sothat only the second half of the blink was present in the epoch? You canactually specify a <b>Test Period</b><span style='font-weight:normal'> thatstarts before the epoch and ends after the epoch if you wish. For example, witha 400-ms blink width, you could specify a </span><b>Test Period</b><spanstyle='font-weight:normal'> that began at -400 ms. For the first window testedin each epoch (from -400 to 0 ms), the rightmost 200 ms of the Chebyshevfunction would be compared with the EOG data from -200 to -4 ms. Similarly, youcould specify that the </span><b>Test Period</b><span style='font-weight:normal'>end at 996 ms; for the last window tested in each epoch, the leftmost 200 ms ofthe Chebyshev function would be compared with the EOG data from 600 to 796 ms.</span></p><h1 style='margin-left:.55in;text-indent:-.55in'><a name="_Toc111191556">13.3.</a><spanstyle='mso-bookmark:_Toc111191556'><span style='font-size:7.0pt;font-family:"Times New Roman"'> </span>The Step Function</span></h1><p class=paragraph>The step function was designed to find the step-like changesin voltage that are produced when subjects make saccadic eye movements, but itis useful for detecting other kinds of artifacts as well (e.g., blinks). Thestep function begins by defining a step-shaped function of a particular width(e.g., <!--[if gte vml 1]><v:shape id="_x0000_s1031" type="#_x0000_t75" alt="" style='position:absolute;left:0;text-align:left;margin-left:0;margin-top:0; width:83pt;height:24pt;z-index:6;mso-wrap-distance-left:9pt; mso-wrap-distance-top:0;mso-wrap-distance-right:9pt; mso-wrap-distance-bottom:0;mso-position-horizontal:left; mso-position-horizontal-relative:text;mso-position-vertical-relative:line' o:allowoverlap="f"> <v:imagedata src="ERPLAB_MANUAL_BETA114_files/image022.gif"/> <w:wrap type="square" anchorx="page"/></v:shape><![endif]--><![if !vml]><img width=83 height=24src="ERPLAB_MANUAL_BETA114_files/image022.gif" align=left hspace=9 v:shapes="_x0000_s1031"><![endif]>100ms at one voltage and then 100 ms at a different voltage). An example stepfunction is shown at left, and a screenshot of the window that allows you toenter the parameters for the function is shown below. As in the previousexamples, we have selected a <b>Test Period</b><span style='font-weight:normal'>that goes from -200 to +796 ms. We’ve defined the </span><b>Moving window fullwidth</b><span style='font-weight:normal'> as 200 ms (100 ms before and 100 msafter the voltage transition). And we’ve defined the </span><b>Window Step</b><spanstyle='font-weight:normal'> as 20 ms. The routine then checks for step-shapedsegments of data, beginning at the start of the </span><b>Test Period</b><spanstyle='font-weight:normal'>, and shifting to the right according to the </span><b>WindowStep</b><span style='font-weight:normal'>. In the present example, it wouldbegin by examining the period from -200 to -4 ms, then shift to the period from-180 to 16 ms, etc. As in the Blink Detection routine, a smaller </span><b>WindowStep</b><span style='font-weight:normal'> value will be slightly more likely todetect artifacts but will make the routine run more slowly. You will need toexperiment with it to find the best tradeoff between these factors.</span></p><p class=paragraph><!--[if gte vml 1]><v:shape id="_x0000_s1032" type="#_x0000_t75" alt="" style='position:absolute;left:0;text-align:left;margin-left:0; margin-top:0;width:91pt;height:156pt;z-index:7;mso-wrap-distance-left:9pt; mso-wrap-distance-top:0;mso-wrap-distance-right:9pt; mso-wrap-distance-bottom:0;mso-position-horizontal:left; mso-position-horizontal-relative:text;mso-position-vertical-relative:line' o:allowoverlap="f"> <v:imagedata src="ERPLAB_MANUAL_BETA114_files/image023.gif"/> <w:wrap type="square" anchorx="page"/></v:shape><![endif]--><![if !vml]><img width=91 height=156src="ERPLAB_MANUAL_BETA114_files/image023.gif" align=left hspace=9 v:shapes="_x0000_s1032"><![endif]>Thereare two ways of thinking about how the step function works. First, the covariancebetween the step function and the data is computed in each step, providing ameasure of the extent to which that segment of data looks like a large voltagestep. This is done across the entire <b>Test Period</b><span style='font-weight:normal'>, and the epoch is rejected if the largest covariance is greater thanthe rejection threshold. It turns out that this is computationally identical totaking the mean voltage from the first half of the step and subtracting it fromthe mean voltage from the second half. That is, the mean voltage between -200and -104 ms would be subtracted from the mean voltage between -100 and -4 ms.Then the mean voltage between -180 to -84 ms would be subtracted from the meanvoltage between -80 and 16 ms. This would be done for each interval through outthe </span><b>Test Period</b><span style='font-weight:normal'>, and the largestof these voltage differences is compared with the rejection threshold todetermine whether the present epoch should be marked for rejection.</span></p><h1 style='margin-left:.55in;text-indent:-.55in'><a name="_Toc111191557">13.4.</a><spanstyle='mso-bookmark:_Toc111191557'><span style='font-size:7.0pt;font-family:"Times New Roman"'> </span>Sample-to-Sample Voltage Threshold</span></h1><p class=paragraph>This function finds sudden shifts in voltage between onesample and the next. You simply select the threshold, and it rejects any epochsin which the difference in voltage between consecutive sample points exceedsthis threshold.</p><p class=MsoNormal style='margin-left:-4.5pt;text-align:justify'><spanstyle='font-size:11.0pt'>&nbsp;</span></p><h1><a name="_Toc111191558">14.</a><span style='mso-bookmark:_Toc111191558'><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Getting Useful Information from the Matlab Command Line</span></h1><p class=paragraph>Even if you do not know anything about Matlab programmingand only use ERPLAB from the GUI, you can use the Matlab command line to obtainuseful information about the current <b>EEG</b><span style='font-weight:normal'>and </span><b>ERP</b><span style='font-weight:normal'> structures. You cansimply type the name of a variable on the command line to see a summary of itscontents. For example, here is an example of what you will see if you type“ERP” on the command line (when an ERPset is active in the ERPsets menu).</span></p><p class=commandwindowtext>&gt;&gt; ERP</p><p class=commandwindowtext>&nbsp;</p><p class=commandwindowtext>ERP = </p><p class=commandwindowtext>&nbsp;</p><p class=commandwindowtext>erpname: 'CNS Demo ERPs filtered differencewave'</p><p class=commandwindowtext>filename: []</p><p class=commandwindowtext>filepath: []</p><p class=commandwindowtext>workfiles: {''}</p><p class=commandwindowtext>subject: ''</p><p class=commandwindowtext>nchan: 14</p><p class=commandwindowtext>nbin: 3</p><p class=commandwindowtext>pnts: 250</p><p class=commandwindowtext>srate: 250</p><p class=commandwindowtext>xmin: -0.2000</p><p class=commandwindowtext>xmax: 0.7960</p><p class=commandwindowtext>times: [1x250 double]</p><p class=commandwindowtext>bindata: [14x250x3 double]</p><p class=commandwindowtext>ntrials: [1x1 struct]</p><p class=commandwindowtext>isfilt: 1</p><p class=commandwindowtext>chanlocs: [1x14 struct]</p><p class=commandwindowtext>ref: 'common'</p><p class=commandwindowtext>bindescr: {'Standard (correct)' 'Target (correct)''DIFF WAVE'}</p><p class=commandwindowtext>saved: 'no'</p><p class=commandwindowtext>history: [4x826 char]</p><p class=commandwindowtext>version: '1.1.4'</p><p class=commandwindowtext><span style='font-size:11.0pt'>&nbsp;</span></p><p class=paragraph>Each line shows a field in the <b>ERP</b><spanstyle='font-weight:normal'> structure. When a given field contains relativelysimple data, the values are shown for that field. In the current example, thevalues from the fields show that the currently active ERPset has 14 channels (<i>nchans</i></span>),3 bins (<i>nbins</i><span style='font-style:normal'>), 250 sample points perepoch (</span><i>pnts</i><span style='font-style:normal'>), a sampling rate of250 Hz (</span><i>srate</i><span style='font-style:normal'>), a starting pointof -0.2 seconds (200 ms; </span><i>xmin</i><span style='font-style:normal'>),an ending point of 0.796 seconds (796 ms; </span><i>xmax</i><spanstyle='font-style:normal'>), has been filtered (</span><i>isfilt</i><spanstyle='font-style:normal'>), has not been saved to disk (</span><i>saved</i><spanstyle='font-style:normal'>). When a field contains larger data, a summary ofthe matrix for that field is shown (e.g., “[4x826 char]” means a 2-dimensionalcharacter array with 4 rows and 826 columns). If you want to see the contentsof one of these complex fields, you can type the name of the structure, a dot,and the name of the field. For example, to see the number of trials in each bin(in the </span><i>ntrials</i><span style='font-style:normal'> field), you wouldtype “ERP.ntrials”. The result would look like this:</span></p><p class=commandwindowtext>&gt;&gt; ERP.ntrials</p><p class=commandwindowtext>&nbsp;</p><p class=commandwindowtext>ans = </p><p class=commandwindowtext>&nbsp;</p><p class=commandwindowtext>accepted: [246 63 309]</p><p class=commandwindowtext>rejected: [6 0 6]</p><p class=commandwindowtext>invalid: [0 0 0]</p><p class=commandwindowtext>&nbsp;</p><p class=paragraph>This means that there were 246 trials included in theaverage for bin 1, 63 for bin 2, and 309 for bin 3. The number of trialsrejected because of artifacts was 6, 0, and 6, respectively. The “invalid”field is the count of trials that were rejected because of some kind of problem(e.g., the EEG epoch ended before the end of the trial). Note that bin 3 inthis example is a difference wave created by subtracting bin 1 from bin 2; thenumber of trials in such cases is the total number of trials contributing tothe average (i.e., the sum of the trials in the individual averages that werecombined to create the new bins).</p><p class=paragraph>You can use this same approach to see the contents of thecurrent <b>EEG</b><span style='font-weight:normal'> structure. To see the </span><b>EVENTLIST</b><spanstyle='font-weight:normal'> that was created for the current </span><b>EEG</b><spanstyle='font-weight:normal'> structure, you can simply type “EEG.EVENTLIST”. Theresult would look something like this:</span></p><p class=commandwindowtext>&gt;&gt; EEG.EVENTLIST</p><p class=commandwindowtext>&nbsp;</p><p class=commandwindowtext>ans = </p><p class=commandwindowtext>&nbsp;</p><p class=commandwindowtext>nbin: 2</p><p class=commandwindowtext>trialsperbin: [252 63]</p><p class=commandwindowtext>setname: 'CNT file_elist'</p><p class=commandwindowtext>report: 'ERPLAB Demo 3-09_REPORT.txt'</p><p class=commandwindowtext>bdfname: 'CNS Demo BDF.txt'</p><p class=commandwindowtext>version: '1.1.4'</p><p class=commandwindowtext>account: 'luck'</p><p class=commandwindowtext>username: ''</p><p class=commandwindowtext>elname: 'ERPLAB Demo 3-09.txt'</p><p class=commandwindowtext>bdf: [1x2 struct]</p><p class=commandwindowtext>eldate: '16-Jul-2009 09:22:37'</p><p class=commandwindowtext>eventinfo: [1x315 struct]</p><p class=MsoNormal style='margin-left:-4.5pt;text-align:justify'><spanstyle='font-size:9.0pt;font-family:Courier'>&nbsp;</span></p><p class=MsoNormal style='margin-left:-4.5pt;text-align:justify'><spanstyle='font-size:11.0pt'>&nbsp;</span></p><p class=paragraph>Note that the <i>setname</i><span style='font-style:normal'>field stores the name of the dataset that was active when the <b>EVENTLIST</b></span>structure was created, not the name of the currently active dataset. Also notethat information from the bin descriptor file is present if BINLISTER has beenrun. That is, if you type “EEG.EVENTLIST.bdf”, you can see the bin descriptionthat was used to define each bin. This is helpful if you create the file oneday and go back to it a year later, by which time you’ve forgotten exactly whatyou did to create the <b>EVENTLIST</b><span style='font-weight:normal'>.</span></p><h1><a name="_Toc111191559"></a><a name="_Compute_Averaged_ERPs"></a>15.<spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Compute Averaged ERPs</h1><p class=paragraph>Now for the moment you’ve been waiting for: This is the stepwhere you average the epochs in each bin together to create a set of averagedERP waveforms. Because of all the hard work you’ve done prior to averaging, theactual averaging process is very simple. </p><p class=paragraph>There is only one slight complication, which is that it ispossible to average across multiple sets of EEG data at one time. Imagine, forexample, that you recorded half of the data for a given subject on one day andthe other half on a different day, resulting in two separate EEG files (storedin separate datasets). Or imagine that you have 6 conditions, and each wasrecorded in a separate file. You could average each of the datasets separatelyand then combine the averages. But ERPLAB makes it possible to combine themduring the averaging process. This is accomplished very simply by specifyingmultiple datasets when you average. All the datasets are then treated as ifthey are one big dataset.</p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Select <b>ERPLAB &gt; Compute Averaged ERPs</b></p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>In the window that appears, enter the number of the dataset thatcontains the data you would like to average (or multiple datasets). The currentdataset is the default. The dataset must be epoched and must contain an <b>EVENTLIST</b><spanstyle='font-weight:normal'> structure from the BinLister step. For example ifyou want to average the epochs in dataset #2, you would simply type ‘2’ intothe window. If you wanted to average the epochs in datasets 2, 3, and 5, youwould type ‘2 3 5’ into the window.</span></p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>If you aren’t sure what the number of your dataset is, just look in the <b>Datasets</b><spanstyle='font-weight:normal'> menu.</span></p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Click <b>Done</b><span style='font-weight:normal'> to compute theaveraged ERPs.</span></p><p class=bulletedlist><span style='font-family:Symbol'>·</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>When the averaged ERPs have been computed, a window will appear allowingyou to name and save the ERPset containing the new <b>ERP</b><spanstyle='font-weight:normal'> structure (see screenshot below). This same windowappears whenever you create a new ERPset. Here’s how it works:</span></p><p class=bulletedlist style='margin-left:1.0in'><span style='font-family:"Courier New"'>o</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>You can choose to either overwrite the current ERPset or create a newERPset. ERPsets don’t usually take up much RAM, so you will almost always wantto create a new ERPset.</p><p class=bulletedlist style='margin-left:1.0in'><span style='font-family:"Courier New"'>o</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>You need to choose a name for the ERPset. This will be the name shown inthe <b>ERPsets</b><span style='font-weight:normal'> menu.</span></p><p class=bulletedlist style='margin-left:1.0in'><span style='font-family:"Courier New"'>o</span><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>You can optionally save the ERPset as a file. If you click the <b>sameas erpname</b><span style='font-weight:normal'> button, it will give the filethe same name as the ERPset (recommended in most cases), but with a </span><b>.erp</b><spanstyle='font-weight:normal'> extension. By default, it will be saved in thecurrent folder. However, you can use the </span><b>Browse</b><spanstyle='font-weight:normal'> button to browse through your file system to find aplace for it (or you can include the path explicitly along with the filename).</span></p><p class=paragraph><img border=0 width=260 height=189 id="_x0000_i1039"src="ERPLAB_MANUAL_BETA114_files/image024.gif"></p><p class=paragraph>&nbsp;</p><p class=paragraph>Because of Matlab’s memory limitations, it is often usefulto split a given subject’s data into multiple datasets. All the EEG processingis then done on the individual datasets, and they are effectively combinedduring the averaging process. This often means that you need to open multipledataset files at a given time so that they can all be averaged together. Tofacilitate this, we have added a function that allows you to open multipledataset files in a single command. This command is not found in theTools&gt;ERPLAB Toolbox menu, but is instead found in <b>File&gt;Importdata&gt;Load multiple ERPLAB datasets</b><span style='font-weight:normal'>.This will pop up a file selection window, and you can control-click orcommand-click on multiple files from this window.</span></p><h1><a name="_Toc111191560">16.</a><span style='mso-bookmark:_Toc111191560'><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Bin Operations</span></h1><p class=paragraph>The ‘Bin Operations’ function allows you to compute new binsthat are combinations of the bins in the current ERP structure. For example,you can average multiple bins together, and you can compute difference waves.It operates in the same basic manner as Channel Operations. For example, tocreate a new Bin 3 that is the average of the current Bin 1 and Bin 2, youwould write the following equation: “b3 = (b1+b2)/2” (or “b3 = 0.5*b1 +0.5*b2”). The screenshot below shows the GUI. You will usually want to create alabel for a new bin by putting “label [text]” at the end of the equation. Inthe example below, a difference wave is being created (b3 = b2 &#8211; b1) and“Diff Wave” is specified as the label.</p><p class=paragraph>The panel at the right side of the Bin Operations GUI liststhe bins in the current ERPset. The panel at the left side of the windowcontains the equations for creating the new bins. You can either modify and addto the bins in the current dataset (by clicking the <b>UPDATE current ERP</b><spanstyle='font-weight:normal'> button) or create a new ERPset (by clicking the </span><b>Createnew ERP</b><span style='font-weight:normal'> button). If you are creating a newERPset, you need to make sure that the panel on the left defines all the bins,beginning at Bin 1. If you are updating an existing ERPset, you can change theexisting bins and/or add bins onto the end of the ERPset. In either case, youmust define a contiguous set of bins (e.g., you can’t end up with Bins 1-4 and6-9 being defined, with no definition of Bin 5). If you are updating anexisting ERPset, any bins in the original ERPset will remain unchanged afterupdating if they have not be re-defined in the left panel. If you’d like to bereminded of the syntax for the equations in the left panel, just click the </span><b>Examples</b><spanstyle='font-weight:normal'> button.</span></p><p class=paragraph><img border=0 width=469 height=170 id="_x0000_i1040"src="ERPLAB_MANUAL_BETA114_files/image025.gif"></p><p class=paragraph>In most cases, you won’t want to retype the equations everytime you want to apply the same set of operations to a different ERPset (e.g.,for each subject in an experiment). Instead, you can type them once, save themto a text file with the <b>Export</b><span style='font-weight:normal'> button,and then read them back in the next time you need them by clicking the </span><b>Import</b><spanstyle='font-weight:normal'> button. You can, of course, maintain many differentsets of equations by saving them in different text files. You can even createthe text file with a text editor or a program if you’re doing something reallycomplicated.</span></p><p class=paragraph>In the equations in the left panel of the window, the binslisted on the right side of the equal sign are the original bins from thecurrent ERPset. Consider, for example, the following equations. The new Bin 1is the original Bin 1 divided by 2 (which would just decrease the amplitude ofthe waveform by 50%). The new Bin 2 is the original Bin 2 minus the originalBin 1 (not the original Bin 2 minus the new, half-amplitude version of Bin 2).</p><p class=literaltext>b1 = b1/2</p><p class=literaltext>b2 = b2 &#8211; b1</p><p class=literaltext>&nbsp;</p><p class=paragraph>It is also possible to specify different subsets of channelsfor the different bins being used in a given equation. For example, if you aretrying to compute a lateralized readiness potential (LRP) waveform, you willwant to subtract trials with an ipsilateral response from trials with acontralateral response, averaged across the left and right hemispheres. Thatis, you want to make a contralateral average (left-hemisphere electrode sitesfor right-hand responses averaged with right-hemisphere electrode sites forleft-hand responses) and an ipsilateral average (left-hemisphere sites forleft-hand responses averaged with right-hemisphere sites for right-handresponse) and compute the difference. </p><p class=paragraph>To do this in Bin Operations, you first define sets ofelectrodes corresponding to the left and right hemispheres. Imagine that theelectrode sites 1-6 are as follows 1=F3, 2=F4, 3=C3, 4=C4, 5=P3, 6=P4. Andimagine that Bin 1 corresponds to left-hand responses whereas Bin 2 correspondsto right-hand responses. The following shows how you would define left- andright-hemisphere groups and use them to form a contralateral waveform (new Bin1), an ipsilateral waveform (new Bin 2), and a contra-minus-ipsi differencewave (new Bin 3):</p><p class=literaltext>LH = [1 3 5] </p><p class=literaltext>RH = [2 4 6] </p><p class=literaltext>b1 = (b2:LH + b1:RH)/2 label Average Contra</p><p class=literaltext>b2 = (b1:LH + b2:RH)/2 label Average Ipsi</p><p class=literaltext>b3 = ((b2:LH + b1:RH)/2) &#8211; ((b1:LH + b2:RH)/2) labelAverage Contra Minus Ipsi</p><p class=literaltext>&nbsp;</p><p class=paragraph>In this example, we first define two electrode groups, namedLH and RH (containing the left-hemisphere and right-hemisphere electrode sites,respectively). We then specify which electrode groups should be used for eachbin by connecting the bin number and the electrode group with a colon.</p><p class=paragraph>The resulting ERPset would have only 3 channels(automatically labeled ‘F3/4’ ‘C3/4’ ‘P3/4’). Consequently, you would not beable to update the existing ERPset when creating these new bins; you would needto create a new ERPset.</p><p class=paragraph>You can have ERPLAB automatically create left- andright-hemisphere groups on the basis of the channel labels. Specifically, the“LH =” and “RH =” lines in the above example could be replaced by the followingline:</p><p class=paragraph>[LH RH] = splitbrain(ERP)</p><p class=paragraph>The <b>splitbrain()</b><span style='font-weight:normal'>function finds pairs of electrodes whose names are identical except for endingwith consecutive odd (for left-hemisphere) and even (for right-hemisphere) numbers(following the International 10/20 System convention). For example, it wouldtreat Fp1 and Fp2 as corresponding left-right pairs. But the electrode names donot have to be standard 10/20 names (e.g., it would treat Temporal125 andTemporal126 as corresponding left-right pairs). Any electrode sites that don’tend in a number will be excluded from the channel groups (e.g., Fz), and willgenerate a warning (which you can usually ignore because you usually want toexclude such electrodes when creating left-right pairs).</span></p><p class=paragraph>Note that, although “LH” and “RH” were used to name theelectrode groups in these examples, you can use any strings to name the groups.</p><h1><a name="_Toc111191561"></a><a name="_Filtering"></a>17.<spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Filtering</h1><p class=paragraph>ERPLAB provides a Butterworth filter that can be used eitheron the <b>EEG</b><span style='font-weight:normal'> structure in a dataset (</span><b>ERPLAB&gt; Filter Tools &gt; For EEG Dataset</b><span style='font-weight:normal'>) oron the </span><b>ERP</b><span style='font-weight:normal'> structure in anERPset (</span><b>ERPLAB &gt; Filter Tools &gt; For ERPå</b><spanstyle='font-weight:normal'>). The filter is applied in both directions toproduce a zero phase-shift, noncausal filter. The GUI is the same for both theEEG and ERP versions (with one exception that will be described later), and isshown in the screenshot below.</span></p><p class=paragraph>The GUI allows you to implement a low-pass filter, ahigh-pass filter, or both (implemented sequentially rather than as asimultaneous bandpass filter). You simply specify the half-power (-3 dB) cutoffat the low end and/or at the high end, along with the order of the filter(which determines the slope of the filter’s rolloff). The frequency responsefunction of the filter is shown for whatever parameters you specify. You canalso select a subset of the channels for filtering (although you will usuallywant to filter all channels).</p><p class=paragraph>It is important to note that filters are a form ofcontrolled distortion. The more heavily you filter your data, the more you aredistorting the data (especially the time course of the ERP waveform). In manycases, mildly filtering the data removes a great deal of noise while causingminimal distortion of the data, making it very worthwhile. In most cognitiveexperiments, for example, you will increase your statistical power by filteringthe low frequencies under 0.01&#8211;0.1 Hz and by filtering the highfrequencies above 20&#8211;40 Hz. However, using a narrower range offrequencies may severally distort your data, leading you to draw incorrectconclusions (for details, see Chapter 5 in Luck, 2005, <i>An Introduction tothe Event-Related Potential Technique</i><span style='font-style:normal'>). Inaddition, these distortions are usually worse for filters with steeper slopes.Thus, we strongly recommend that you use relatively low-order filters and donot use a low cutoff of &gt; 0.1 Hz or a high cutoff of &lt; 20 Hz unless youhave a good understanding of how filters operate in the time domain (i.e., howfiltering operates as a convolution of the EEG/ERP waveform and the filter’simpulse response function). For an example of how severe filtering can lead toincorrect conclusions, see Yeung et al., 2007, </span><i>Psychophysiology</i><spanstyle='font-style:normal'>, 44, 39-49.</span></p><p class=paragraph><img border=0 width=332 height=233 id="_x0000_i1041"src="ERPLAB_MANUAL_BETA114_files/image026.jpg"></p><p class=paragraph>The GUI for filtering the EEG also contains an option toremove the DC offset before filtering. This is very important if you are usingDC recordings and are using a high-pass filter (i.e., filtering out the lowfrequencies). If the EEG for a given recording session has a large DC offset, ahigh-pass filter will remove this offset by bring the voltage down toward zero.This puts an artifact&#8212;which may be enormous&#8212;into your data duringthe period in which the voltage is being brought toward zero. This problem canbe solved, at least in part, by simply subtracting the average voltage of thewhole EEG waveform from each point in the waveform before filtering. This won’thurt if you do not have DC recordings, so it is active by default.</p><p class=paragraph><span style='background:aqua'>Similarly, filters can producedistortions if the DC offset changes suddenly. This can happen if you runmultiple blocks of trials, separated by pauses during which the data are notsaved in the EEG file. That is, if the DC offset gradually changes over time,and a period of time is missing from the EEG data, then a sudden change inoffset will be present at the boundary between the nonconsecutive periods ofthe recording. This can also happen when several data individual datasets areconcatenated into a single dataset. When the ERPLAB filter tools are applied tocontinuous EEG data, the filters are normally applied separately to segments ofdata defined by <b>boundary</b></span><span style='background:aqua'> events(see <a href="#_Boundary_Events_and_2">the section on boundary events</a>).Thus, you should make sure that <b>boundary</b></span><span style='background:aqua'> events are present whenever there are discontinuities in the EEG data.You can disable this in the filtering GUI, in which case boundary events will beignored and the filter will be applied to the entire file as if it was acontinuous data set (not recommended unless you really know what you’redoing!).</span></p><h1><a name="_Toc111191562">18.</a><span style='mso-bookmark:_Toc111191562'><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Plotting ERP Waveforms</span></h1><p class=paragraph>Once you have an <b>ERP</b><span style='font-weight:normal'>structure active in an ERPset (via averaging or by loading a saved ERPset fromdisk), you can plot the data with the </span><b>ERPLAB &gt; Plot ERP Waveforms</b><spanstyle='font-weight:normal'> function. It is designed to be a relative simpleplotting routine that can be used for one of two purposes: 1) Providing aquick-and-dirty view of your averaged data; and 2) Exporting this view as avector file that can be read into a commercial graphics program such as AdobeIllustrator. The Plot Averages module is not intended to provide theflexibility necessary to directly produce publication-quality images; thisshould be done by exporting the waveforms into a commercial graphics program.The </span><b>Plot ERP Waveforms</b><span style='font-weight:normal'> GUI isshown in the screenshot below, along with an example of a plot created with theparameters shown in the GUI screenshot.</span></p><p class=paragraph>We will start with a general overview of plotting and thendiscuss each element of the GUI in detail. You will typically begin byselecting which bins and channels to plot, along with the time range to show,the period to be used for baseline correction, and the Y (voltage) scale. Youcan click on the +/- symbol to control whether positive or negative is plottedupward. You then click the <b>PLOT</b><span style='font-weight:normal'> buttonto create a window showing the waveforms. If you click the </span><b>PDF</b><spanstyle='font-weight:normal'> button, the plot will be saved as a PDF file, whichyou can print or import into a graphics program.</span></p><p class=paragraph>It is important to note that the plotting function getsinformation from the currently active ERPset when you launch the plotting GUI.If, while the GUI is active, you select a different ERPset, the plotting GUIwill not “know” that you have done this, which could lead to much confusion.Thus, you should always quit from the plotting GUI before accessing any otherERPLAB functions. This is true of the other ERPLAB functions as well (i.e.,when the GUI for one ERPLAB function is open, you should not access otherERPLAB functions). However, it is particularly tempting to try to use the <b>ERPsets</b><spanstyle='font-weight:normal'> menu to select a new ERPset while the plotting GUIis open. But don’t do it! In a future version of ERPLAB we will make itpossible to select a different ERPset from the plotting GUI. For now, you willneed to first close the plotting GUI, then select a different ERPset, and thenlaunch the plotting GUI again (by selecting </span><b>ERPLAB &gt; Plot ERPWaveforms</b><span style='font-weight:normal'>).</span></p><p class=paragraph>Fortunately, the plotting GUI will remember the settingsfrom the last time you used it, so you will not lose your settings when youclose the GUI to select a new ERPset. But this sometimes leads to otherproblems. For example, if the new ERPset was created with a different epochperiod, the time range that you used the last time you used the plotting GUImay no longer be valid. If you click the <b>RESET VALUES</b><spanstyle='font-weight:normal'> button, the GUI will reset to default parametersthat reflect the currently active ERPset.</span></p><p class=MsoNormal style='margin-left:-4.5pt;text-align:justify'><img border=0width=374 height=235 id="_x0000_i1042"src="ERPLAB_MANUAL_BETA114_files/image027.gif"></p><p class=MsoNormal style='margin-left:-4.5pt;text-align:justify'>&nbsp;</p><p class=MsoNormal style='margin-left:-4.5pt;text-align:justify'><img border=0width=458 height=347 id="_x0000_i1043"src="ERPLAB_MANUAL_BETA114_files/image028.gif"></p><p class=paragraph>In the example plot shown above, you will see a set of menusand a toolbar. These menus are available because <b>Include Toolbar</b><spanstyle='font-weight:normal'> was selected in the plotting GUI. When this optionis set, ERPLAB uses a standard MATLAB plotting routine to plot the waveforms.This routine provides many options that allow you to interact with the plots.For example, if you click within one of the panels of the plot (i.e., the setof waveforms for a given channel), a new window will appear showing a largerview of this panel. In addition, if you click the data cursor button in thetool bar, you will see a cursor that allows you to see the X and Y values atany point on a waveform by clicking on it. The downside of this mode ofplotting is that it requires that the X baseline be plotted at the bottom ofeach panel. We usually want the X baseline to be at zero µV in ERP figures. Toachieve this, simply de-select </span><b>Include Toolbar</b><spanstyle='font-weight:normal'> and plot the data again. The result will look likethe screenshot below. We recommend that you include the toolbar when you arejust planning to look at the data from within Matlab during the course of dataanalysis, and we recommend that you turn it off when you are making a figurefor a presentation or paper.</span></p><p class=MsoNormal style='margin-left:-4.5pt;text-align:justify'>&nbsp;</p><p class=MsoNormal style='margin-left:-4.5pt;text-align:justify'>&nbsp;</p><p class=MsoNormal style='margin-left:-4.5pt;text-align:justify'>&nbsp;</p><p class=MsoNormal style='margin-left:-4.5pt;text-align:justify'><img border=0width=375 height=269 id="_x0000_i1044"src="ERPLAB_MANUAL_BETA114_files/image029.gif"></p><p class=MsoNormal style='margin-left:-4.5pt;text-align:justify'>&nbsp;</p><p class=paragraph>Here are the details of the options:</p><p class=paragraph><b>Bins to Plot</b></p><p class=paragraph>This is simply a list of the bins that should be included inthe plot, in the standard Matlab format (e.g., “2 3 4 5” or “2:5”). Currently,ERPLAB creates a separate panel for each channel and overlays the selected binswithin each panel, but we plan to allow more complex plots in future versions.Note that a popup menu next to the text box will allow you to see the binlabels along with the bin numbers so that you do not need to remember the binnumbers.</p><p class=paragraph><b>Channels to Plot</b></p><p class=paragraph>This is simply a list of the channels that should beincluded in the plot, again in the standard Matlab format (e.g., “2 3 4 5” or“2:5”). A popup menu next to the text box will allow you to see the channellabels along with the channel numbers so that you do not need to remember thechannel numbers. An option is provided for plotting the channel numbers ratherthan the channel labels.</p><p class=paragraph><b>Time Range and Baseline Correction</b></p><p class=paragraph>The <b>Time Range</b><span style='font-weight:normal'> fieldallows you to specify the time range that will be shown in the plots. Thisrange must not exceed the epoch length of the data. The default is the entireepoch.</span></p><p class=paragraph>The <b>Baseline Correction</b><span style='font-weight:normal'>panel allows you to specify the time range that will be used to baseline theplots. In most cases, you will have already baselined your data duringepoching, and it is not necessary to re-baseline the data before plotting.However, it doesn’t hurt, and it is good to be reminded that the baselineperiod plays an important role in determining the amplitude at each time pointin the waveform. The default baseline period is the prestimulus interval (</span><b>Pre</b><spanstyle='font-weight:normal'>). You can also select </span><b>None</b><spanstyle='font-weight:normal'> (no baselining), </span><b>Post</b><spanstyle='font-weight:normal'> (post-stimulus interval), </span><b>Whole</b><spanstyle='font-weight:normal'> (the entire epoch), and </span><b>Custom</b><spanstyle='font-weight:normal'> (in which case you must enter the time period inmilliseconds). When the data are plotted, the average voltage across theselected interval is subtracted from each point in the waveform.</span></p><p class=paragraph><b>Y Scale</b></p><p class=paragraph>This panel determines the amplitude scaling. If <b>Auto</b><spanstyle='font-weight:normal'> is selected, the plotting function determines ascale based on the minimum and maximum points across all waveforms that will beplotted. If you de-select </span><b>Auto</b><span style='font-weight:normal'>,you can enter the minimum and maximum voltages that will be shown in each panelof the plot. You can also click the +/- button to determine whether positive ornegative is plotted upward (the button shows + on top if positive is plottedupward and &#8211; on top if negative is plotted upward). (Positive upward isthe default because it is the standard for the Cartesian coordinate system andis expected by the vast majority of scientists.)</span></p><p class=paragraph><b>Other Options</b></p><p class=paragraph>The <b>Set frame(s)</b><span style='font-weight:normal'>option allows you to determine how many rows and columns will be shown. The </span><b>linewidth</b><span style='font-weight:normal'> sets the width of the line used fordrawing the waveforms. The </span><b>Set fonts</b><span style='font-weight:normal'> option allows you to determine the font size that will be used for thechannel labels and for the legend. The </span><b>Legend pos</b><spanstyle='font-weight:normal'> option allows you to determine whether the legendwill be plotted at the bottom of the figure, the right of the figure, or in aseparate window.</span></p><p class=paragraph style='tab-stops:112.8pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><h1><a name="_Toc111191563">19.</a><span style='mso-bookmark:_Toc111191563'><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Topographic Mapping</span></h1><p class=paragraph>ERPLAB provides a simple interface to EEGLAB’s topoplotfunction, which is accessed by selecting <b>ERPLAB &gt;</b><spanstyle='font-weight:normal'> </span><b>Plot 2D ERP Map</b><spanstyle='font-weight:normal'>. This routine allows you to plot the data from aselected time period for a selected set of bins from the currently selectedERPset. The GUI is shown below, along with an example of the output.</span></p><p class=paragraph>To plot a set of topographic maps, you start by selectingwhich bin or bins will be plotted. The popup menu allows you to see the labelsfor each bin so that you can remember what information is stored in each bin.You next select the time period to plot. You can select the <b>Instantaneousamplitude</b><span style='font-weight:normal'>, which plots the voltagedistribution at a single time point (which you specify in the </span><b>Latency(ies)</b><spanstyle='font-weight:normal'> field). You can instead select </span><b>Meanamplitude</b><span style='font-weight:normal'> or </span><b>Area amplitude</b><spanstyle='font-weight:normal'>, in which case you provide two time points todescribe the beginning and end of the time range (mean and area are the sameexcept that mean divides by the duration of the time period). You must alsoselect a baseline correction period, just as in plotting ERP waveforms.Finally, you select a scaling option. If you select </span><b>Max-Min</b><spanstyle='font-weight:normal'>, the routine automatically chooses a scale for eachbin on the basis of the minimum and maximum voltages found in that bin (e.g.,the chosen scale might go from -4 µV to +9 µV). If you select </span><b>Abs Max</b><spanstyle='font-weight:normal'>, the routine finds the minimum and maximum values,and creates a symmetrical scale depending on which has a greater absolute value(e.g., the chosen scale might go from -9 µV to +9 µV). For these two options,each bin is scaled separately. A third option is </span><b>Custom</b><spanstyle='font-weight:normal'>, which allows you to specify the minimum andmaximum values (e.g., you might put </span><b>-5 +5</b><span style='font-weight:normal'> in the text box). In this case, the scale is the same for each bin.</span></p><p class=paragraph><img border=0 width=179 height=284 id="_x0000_i1045"src="ERPLAB_MANUAL_BETA114_files/image030.gif"></p><p class=paragraph><img border=0 width=390 height=306 id="_x0000_i1046"src="ERPLAB_MANUAL_BETA114_files/image031.gif"></p><p class=paragraph>The topographic plotting routine requires that the locationof each electrode is specified (not just the name, but the 3-D coordinates).EEGLAB provides a set of tools for setting the electrode locations in thecurrent <b>EEG</b><span style='font-weight:normal'> structure, accessed via </span><b>Edit&gt; Channel Locations</b><span style='font-weight:normal'>, and this can bedone very easily by using a set of standard coordinates based on the electrodenames. Ordinarily, you will do this prior to averaging. If, however, you select</span><b>ERPLAB &gt;</b><span style='font-weight:normal'> </span><b>Plot 2DERP Map</b><span style='font-weight:normal'> without first setting the channellocations, ERPLAB will allow you to use EEGLAB’s channel location GUI to setthe channel locations within the current </span><b>ERP</b><spanstyle='font-weight:normal'> structure (see the screenshot below). We typicallyfind that we can simply accept the default settings.</span></p><p class=paragraph><img border=0 width=375 height=215 id="_x0000_i1047"src="ERPLAB_MANUAL_BETA114_files/image032.gif"></p><h1><a name="_Toc111191564">20.</a><span style='mso-bookmark:_Toc111191564'><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Saving, Loading, Clearing, and Exporting ERPsets</span></h1><p class=paragraph>Each process that creates a new ERPset gives you theopportunity to save the ERPset in a file. You can also save an ERPset in a fileat any time by making sure it is the active ERPset in the <b>ERPsets</b><spanstyle='font-weight:normal'> menu and then selecting </span><b>ERPLAB &gt; SaveCurrent ERPset</b><span style='font-weight:normal'>. If you would like tochange the name of the current ERPset (i.e., the name shown in the ERPsetsmenu, which is not necessarily the same as the filename), you can select </span><b>ERPLAB&gt; Save Current ERPset</b><span style='font-weight:normal'>. To read in anERPset that was previously saved to disk, you can select </span><b>ERPLAB &gt;Load Existing ERPset</b><span style='font-weight:normal'>. The newly loadedERPset will then become the active ERPset.</span></p><p class=paragraph>We recommend that you use a suffix of <b>.erp</b><spanstyle='font-weight:normal'> for your saved ERPsets.</span></p><p class=paragraph>You can use the <b>ERPLAB &gt; Clear ERPset(s)</b><spanstyle='font-weight:normal'> routine to remove one or more ERPsets from the listshown in the </span><b>ERPsets</b><span style='font-weight:normal'> menu. Thisroutine will pop up a window in which you can list the ERPsets to be cleared.This does not delete the files (if any) associated with the ERPsets; it simplyclears them from memory.</span></p><p class=paragraph>To export an ERPset as a text file, you can select either <b>ERPLAB&gt; Export ERP to Text (Readable by ERPSS)</b><span style='font-weight:normal'>or </span><b>ERPLAB &gt; Export ERP to Text (Universal)</b><spanstyle='font-weight:normal'>. The ERPSS version creates a text file in anERPSS-compatible format in which all bins are stored in a single file. TheUniversal version creates a separate file for each bin using the GUI shownbelow. You can select which bin or bins to export. If you select multiple bins,the name of each bin is inserted into the filename for that bin. You can choosewhether the rows are the time points and the columns are the channels or viceversa. You can also choose whether to include a label for each electrode siteand/or a label for each time point.</span></p><p class=paragraph><img border=0 width=283 height=226 id="_x0000_i1048"src="ERPLAB_MANUAL_BETA114_files/image033.gif"></p><h1><a name="_Toc111191565">21.</a><span style='mso-bookmark:_Toc111191565'><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Averaging Across ERPsets (Creating Grand Averages)</span></h1><p class=paragraph>The<b> ERPLAB &gt; Average Across ERPsets</b><spanstyle='font-weight:normal'> routine is used to average together the data frommultiple ERPsets. That is, each bin from one ERPset is averaged with thecorresponding bin from one or more other ERPsets. The most common use for thisis to create a grand average across subjects. It is also used if the EEG datafor a given subject were divided among different EEG files (e.g., because theywere collected in different sessions) and then averaged separately. Thisroutine can be used only if all of the ERPsets being averaged together containthe same number of bins, channels, and sample points.</span></p><p class=paragraph>The GUI is shown in the screen shot below. You can eitherspecify a set of ERPsets that have already been loaded into ERPLAB and arelisted in the <b>ERPsets</b><span style='font-weight:normal'> menu or a set ofERPsets stored in files on disk. You can save the set of filenames in a listwith the </span><b>Save List</b><span style='font-weight:normal'> option, andyou can load in a set of filenames with the </span><b>Load List</b><spanstyle='font-weight:normal'> option.</span></p><p class=paragraph>Ordinarily, each ERPset being averaged together receivesequally weighting in the average that is created by this routine. That is, theERP waveforms in the separate ERPsets are simply summed together and thendivided by the number of ERPsets. However, there is an option for averaging ina manner that is weighted by the number of trials that contributed to eachaverage (a “weighted average”). Imagine, for example, that you were averagingtogether two sessions from a given subject, with each session stored in aseparate ERPset, and bin 1 contained 10 trials in the first session and 90trials in the second session. If you enable weighted averaging, the average ofbin 1 would be calculated as 10 times the waveform from session 1 plus 90 timesthe waveform from session 2, and then divided by the total number of trials(10+90). This gives each trial equal weight in the final average.</p><p class=paragraph><img border=0 width=249 height=259 id="_x0000_i1049"src="ERPLAB_MANUAL_BETA114_files/image034.gif"></p><h1><a name="_Toc111191566">22.</a><span style='mso-bookmark:_Toc111191566'><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>ERP Measurement Tool</span></h1><p class=paragraph><b>ERPLAB &gt; ERP Measurement Tool </b><spanstyle='font-weight:normal'>is used to measure features of the ERP waveforms,such as amplitudes and latencies. This is a preliminary version, but itprovides the most basic measurement types (e.g., mean amplitude, peakamplitude, peak latency).</span></p><p class=paragraph>The basic idea behind this tool is that you specify a set ofERPsets, a set of bins, a set of channels, and a specific measurement to beperformed (e.g., peak latency between 300 and 600 ms), and then the toolperforms all of the measurements and saves them in a text file. You can eitherspecify ERPsets that have been loaded into ERPLAB (and are therefore visible inthe <b>ERPsets</b><span style='font-weight:normal'> menu) or ERPsets that havebeen stored in files on disk. To make it easy to repeatedly measure the sameset of files, you can save a list of the files and then load it again later.The GUI is shown in the screenshot below.</span></p><p class=paragraph><img border=0 width=468 height=403 id="_x0000_i1050"src="ERPLAB_MANUAL_BETA114_files/image035.gif"></p><p class=paragraph>You also choose what type of value to measure from the ERPwaveforms stored in these ERPsets. In all cases, a latency or range oflatencies will be specified. If the specific latency does not exist, thenearest value will be used (e.g., if there are samples at 396 and 400 ms, andyou specify 397 ms, 396 ms will be used). Here are the different types ofvalues that can be measured:</p><p class=steps><b>a)</b><span style='font-size:7.0pt;font-family:"Times New Roman"'><b>&nbsp;&nbsp;&nbsp;</b></span><b>Instantaneous amplitude</b><span style='font-weight:normal'>-This measures the amplitude at one latency (a single latency is specified inthe </span><b>latency</b><span style='font-weight:normal'> text box).</span></p><p class=steps><span style='color:maroon'><b>b)</b></span><spanstyle='font-size:7.0pt;font-family:"Times New Roman";color:maroon'><b>&nbsp;&nbsp;&nbsp;</b></span><b>Peak amplitude or latency</b><span style='font-weight:normal'>- Thisfinds the most positive or most negative amplitude within a specified timerange (the starting and ending latencies of the time range are specified in the</span><b>latency</b><span style='font-weight:normal'> text box). The amplitudeand/or latency of this peak is provided in the output file. If the </span><b>localpeak</b><span style='font-weight:normal'> option is checked, a peak is definedas the most positive or most negative value that is also (a) larger than thesample points on either side, and (b) larger than the average of the samplepoints within </span><b>N</b><span style='font-weight:normal'> ms on eitherside (</span><b>N</b><span style='font-weight:normal'> is entered into the textbox next to this option). <span style='color:maroon'>If there is no point thatmeets this definition, then a warning message is printed in the command windowand the simple peak (the most positive or negative point) is found.</span></span></p><p class=steps><b>c)</b><span style='font-size:7.0pt;font-family:"Times New Roman"'><b>&nbsp;&nbsp;&nbsp;&nbsp;</b></span><b>Mean amplitude</b><span style='font-weight:normal'>- This findsthe mean voltage within a specified time range (the starting and endinglatencies of the time range are specified in the </span><b>latency</b><spanstyle='font-weight:normal'> text box). </span></p><p class=steps><b>d)</b><span style='font-size:7.0pt;font-family:"Times New Roman"'><b>&nbsp;&nbsp;&nbsp;</b></span><b>Area amplitude</b><span style='font-weight:normal'>- This findsthe area under the curve within a specified time range (the starting and endinglatencies of the time range are specified in the </span><b>latency</b><spanstyle='font-weight:normal'> text box). Area and mean are identical, except thatarea is multiplied by the duration of the time range.</span></p><p class=steps><b>e)</b><span style='font-size:7.0pt;font-family:"Times New Roman"'><b>&nbsp;&nbsp;&nbsp;</b></span><b>Area Auto-Latency</b><span style='font-weight:normal'>- This isunder development and should not be used.</span></p><p class=steps style='tab-stops:.5in list .75in'><b>&nbsp;</b></p><p class=paragraph>The measured values are stored in a text file, which you canimport into the statistical analysis package of your choice. Basic statisticswill be built into a later version of ERPLAB Toolbox.</p><p class=listparagraph align=center style='margin-left:-22.5pt;text-align:center'><spanstyle='font-size:11.0pt'>&nbsp;</span></p><h1><a name="_Toc111191567">23.</a><span style='mso-bookmark:_Toc111191567'><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Scripting using ERPLAB</span></h1><p class=paragraph><span style='font-size:12.0pt;font-family:Courier'>See, atfolder examples, <span style='color:black'>Batch_example1.m</span></span></p><p class=MsoNormal><span style='font-size:11.0pt'>&nbsp;</span></p><p class=MsoNormal><span style='font-size:11.0pt'>&nbsp;</span></p><p class=MsoNormal><span style='font-size:11.0pt'>&nbsp;</span></p><p class=MsoNormal><span style='font-size:11.0pt'>&nbsp;</span></p><span style='font-size:11.0pt;font-family:Arial;mso-font-kerning:18.0pt;mso-ansi-language:EN-US;mso-fareast-language:EN-US'><br clear=ALLstyle='page-break-before:always'></span><h1><a name="_Toc111191568">24.</a><span style='mso-bookmark:_Toc111191568'><spanstyle='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>ERPLAB’s functions</span></h1><p class=MsoNormal><span style='font-size:10.0pt;font-family:Times'><brclear=ALL style='mso-special-character:line-break'><o:p></o:p></span></p><div class=MsoNormal><span style='font-size:10.0pt;font-family:Times'><hr size=1 width="33%" align=left></span></div><p class=MsoFootnoteText><a name="_ftn1"></a><a href="#_ftnref1"><spanstyle='mso-bookmark:_ftn1'><span class=MsoFootnoteReference>[1]</span></span><spanstyle='mso-bookmark:_ftn1'></span></a><span style='mso-bookmark:_ftn1'></span>http://www.mathworks.com/</p><p class=MsoFootnoteText><a name="_ftn2"></a><a href="#_ftnref2"><spanstyle='mso-bookmark:_ftn2'><o:p></o:p></span></a></p><p class=MsoNormal><a href="#_ftnref2"><span style='mso-bookmark:_ftn2'><spanclass=MsoFootnoteReference><span style='font-size:10.0pt;font-family:Times'>[2]</span></span></span><spanstyle='mso-bookmark:_ftn2'></span></a><span style='mso-bookmark:_ftn2'></span><spanstyle='font-size:10.0pt;font-family:Times'>http://sccn.ucsd.edu/eeglab/eeglabdocs.html</span></p><p class=MsoFootnoteText><a name="_ftn3"></a><a href="#_ftnref3"><spanstyle='mso-bookmark:_ftn3'><o:p></o:p></span></a></p><p class=MsoNormal><a href="#_ftnref3"><span style='mso-bookmark:_ftn3'><spanclass=MsoFootnoteReference><span style='font-size:10.0pt;font-family:Times'>[3]</span></span></span><spanstyle='mso-bookmark:_ftn3'></span></a><span style='mso-bookmark:_ftn3'></span><spanstyle='font-size:10.0pt;font-family:Times'> In this example, the data weresampled at 250 Hz (1 sample every 4 ms), and the 1000-ms epoch consisting of250 samples began at -200 ms and ended at 796 ms (not at 800 ms, because thepoint at 796 ms represents the voltage from 796 ms to 799.99999 ms). Similarly,the 200-ms moving window actually goes from -200 to -4 ms, from -180 to +16 ms,etc.</span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:Times'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:Times'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoNormal><span style='font-size:18.0pt;font-family:Courier;color:red'>(DRAFT)</span><span style='font-size:10.0pt;font-family:Times'><o:p></o:p></span></p></div></body></html>